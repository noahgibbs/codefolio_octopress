[{"body":"This is an initial post.  You may ignore it.","created_at":"2012-04-15T19:35:39Z","id":1,"published":false,"title":"First Post","updated_at":"2012-04-15T19:35:39Z"},{"body":"Do you know a little JavaScript and HTML?  Be sure the page is safe <b>before</b> you put in your credit card number -- especially if you want the product and don't know the vendor.\r\n\r\nYou can audit the page's security for yourself, especially if it uses Stripe.  The early parts of the post are useful to check <i>any</i> payment processor.\r\n\r\nI assume you know some HTML and JavaScript.  We'll audit in order of importance.  Start from the top.\r\n\r\n### Security\r\n\r\nFirst, are they using HTTPS?  Look for the green lock, green bar or <a\r\nhref=\"http://faq.ssl.com/article.aspx?id=10068\">equivalent for your browser</a>.\r\n\r\nShort version:  no lock, no buy.  You can skip to the next section if the lock is green.\r\n\r\nNo lock?  They shouldn't be accepting your credit card number, full stop.  Anything they send can be changed in transit without detection.\r\n\r\nIf they're using HTTPS but with a red or crossed-out lock, find out why.  Mouseover or use\r\n<a href=\"http://www.whynopadlock.com\">WhyNoPadlock?</a> (type the URL and hit \"check\").\r\n\r\nA self-signed certificate is unusual but okay &mdash; especially if you're buying from another developer, who may not want to pay for an SSL cert.  Insecure components on the page aren't great.  It's hard for sites that scripts, ads and sharing buttons are often insecure. But <i>the best sites have no insecure components</i>, whether it's a developer running them or not.\r\n\r\nInsecure components are a security liability.\r\n\r\n### JavaScript and Page Source\r\n\r\nNow let's dig in.\r\n\r\nWe'll use <a href=\"https://rebuilding-rails.com/payment_page.html\">https://rebuilding-rails.com/payment_page.html</a> as an example.\r\n\r\nSee that green lock?  So far, so good.  Next, we check the code.\r\n\r\nView the page source.  Search for \"stripe\".  Specifically, look for this:\r\n\r\n```javascript\r\n<script type=\"text/javascript\" src=\"https://js.stripe.com/v1/\"></script>\r\n```\r\n\r\nIf you can't find it, even in any sub-pages, the merchant probably isn't using Stripe.  Then the rest of this post can't help you.  You can check dev tools like \"Scripts\" or \"Resources\" and double-check, though that doesn't work if they're combining all the page JavaScript.\r\n\r\nIf you're really hard core, check the combined page JavaScript for \"stripe\" to be sure.\r\n\r\n### The Form\r\n\r\nNow that you're sure they're using Stripe, we'll compare what the page does with Stripe's <a\r\nhref=\"https://stripe.com/docs/tutorials/forms\">how to build a payment form</a> tutorial to make sure they got the important parts right.\r\n\r\nFind the form where you type payment information.\r\nYou can \"Inspect element\" to find it in most browsers.  Then in the page source, find it by the id or class.\r\n\r\nOn rebuilding-rails.com, for instance, you should look for \"submit_payment\" in the page source.\r\n\r\n![Example Payment Form](payment_form.png \"Payment Form\")\r\n\r\n### Names Have Power\r\n\r\nThe really important thing in this form is: <tt>name</tt> is <b>not set</b> for sensitive information.  Your card number and expiration date should <b>not have a 'name'</b> in the page source.\r\n\r\nNormally with Stripe your credit card number is in your browser and gets sent to Stripe.com, but rebuilding-rails.com won't ever see it.  Name in an input says \"send this to the server\".  So if you see <tt>&lt;input name='credit-card-number'</tt> in the form, that means the server is getting all your information.  <b>Not good</b>.\r\n\r\nNo name means \"you can use it here on this page, but nowhere else.\"  That's the right way.\r\n\r\nA class is fine for your credit card number, expiration and CVC (security code).  The class is how this page will find them (only in your browser).  Only a name or explicit JavaScript will send to the server.\r\n\r\n### Code, Code, Code\r\n\r\nLet's dig in deeper.\r\n\r\nWhat else does the page do with your information?  You found the class of the inputs for your information.  In rebuilding-rails.com, it's class \"card-number\".  So look through the page source and see where else that gets used.\r\n\r\nOn rebuilding-rails.com, the code looks like this:\r\n\r\n![JS code:  Secure Info Becomes a Token](credit_card_js.png \"Credit Card Info Turns Into a Token\")\r\n\r\nYou can see that rebuilding-rails.com does some kind of \"local validity checks\" -- that's exactly the kind of thing to check, and we will later.\r\n\r\n<tt>Stripe.createToken()</tt> is the one thing that every Stripe site should do with your information and you want them to.  That makes sure that Stripe can bill you without the site seeing your info.\r\n\r\nAnd as you can see, that's it.  Once you've checked the token, the page is safe and doing the right thing...  As far as you can see.\r\n\r\n### Malevolence\r\n\r\nNone of this means the page is <i>really</i> secure.  But it means the part you can see is done right, and that's a good sign.  It also means they aren't getting around Stripe to steal your information...  If you did a good job auditing them!\r\n\r\n### Safety\r\n\r\nIn the end, none of this replaces checking your credit card statements.  But it's nice to be able to see when something is done wrong.\r\n\r\nIf it's wrong, don't risk it!\r\n\r\n<span class=\"bottom-disclaimer\">Are you the kind of Do-It-Yourself Programmer that wants to be able to audit page source yourself?  Or write your own framework?  <a href=\"https://rebuilding-rails.com\">My book, Rebuilding-Rails, can help you build your own web framework</a>.  Nobody audits the code as well as the guy who can build it from scratch!</span>\r\n","created_at":"2012-04-15T20:28:52Z","id":2,"published":true,"title":"Developers, Are You Sure That Payment Page is Secure?","updated_at":"2012-04-29T22:06:46Z"},{"body":"Hello, new software engineers!  Welcome to the <a href=\"http://weblog.raganwald.com/2005/07/why-you-need-degree-to-work-for-bigco.html\">(slightly) dysfunctional BigCo family</a>.\r\n\r\nSome of you are coming from Ruby, some Java.  A few of you still think we should rewrite everything in Node.js.  The whole company,  down to the last one-off script.\r\n\r\nGood.\r\n\r\nWe've been doing things our way for a lot of years.  We know why each thing is the way it is.  Being so responsible beats you down over time, you know?\r\n\r\nWe know our coworkers, the battle-tested veterans we code next to each day.  We know what they'll say to each of your naive, fun, uppity suggestions, alas.  We got tired of arguing.\r\n\r\nWe remember the thrill -- \"we should use this for *everything*!\"  Not just about Node.js.  About *every* new technology.  We love technology, just like you do.\r\n\r\nWe know all the reasons we shouldn't do the new exciting stuff at BigCo.  We know them by heart.  We throw buckets of cold water on the new exciting ideas just like our managers do.  We don't hate new exciting ideas.  We just feel like we should be responsible.\r\n\r\nWe really do care...  *I* really do care about this code I'm writing.  I can't spend all day on it without loving it a bit -- how could I?\r\n\r\nYou're looking toward a bright future.  Unfortunately I'm going to dump cold water on your fun project ideas.  So will the people around me.\r\n\r\nI hope that you'll keep just a little of that precious perspective you have today.\r\n\r\nMost of your ideas will go down in flames.  I'll shoot some of them down myself.\r\n\r\nBut just like you're too naive to know all the reasons why not...  We're too cynical to see the reasons why.  Secretly, underneath where I don't tell anybody, I *want* you to convince me that it's the right thing to rewrite everything in Node.js.  *Everything*.  Not because I care about Node.js, but because hot damn would that be fun.  I want to get up and *do* things, do the fun things.\r\n\r\nPlease.  Convince me.  Just a little.\r\n\r\nI know I'm being a stick in the mud.  I have to.  Still, keep watch.  Find, oh, I don't know, the three or four dumbest things we do here.  Remind us that they're dumb.  Show us how valuable your outside perspective is.\r\n\r\nPerspective is precious.  It really is.  The old-timers here have long since lost it.  Yours will trickle away, day by day, until you're like me.\r\n\r\nConvince me that those three things are stupid.  It won't be hard because they really are.\r\n\r\nAnd in return, I'll let you rewrite one or two of them in Node.js.\r\n\r\nDeal?\r\n\r\n<hr />\r\n\r\n<p class=\"bottom-disclaimer\">I love tech.  A lot of what let me enjoy programming again was Ruby, Rails, and building frameworks.  <a href=\"http://rebuilding-rails.com\">I'm writing a book to share the love</a>.  I hope it inspires you like I was inspired.</p>","created_at":"2012-04-17T03:19:39Z","id":3,"published":true,"title":"BigCo New Employee Training, Inside Voice","updated_at":"2012-10-06T17:28:19Z"},{"body":"Programming is writing for a computer.  But more importantly, it is writing for a human.\r\n\r\nThat function you just wrote tells a little story.  It has a point of view.\r\n\r\nSome functions are written to tell how a web request flows through them.  They are clear, easy to read, and tend to do badly if something goes wrong.  That's not the story they are meant to tell.\r\n\r\nThe worst functions have no point of view.  Perhaps they were written badly, or perhaps they were edited to death by a later programmer with a different point of view.  But they are hard to follow <i>because they change point of view</i>.\r\n\r\nThink about who you are writing for.  Think about the story your function should tell.\r\n","created_at":"2012-05-09T02:53:30Z","id":4,"published":true,"title":"Your App Is Written From Your Point of View","updated_at":"2012-07-13T01:20:24Z"},{"body":"Here are slides from an upcoming talk at Hacker Dojo's lightning talks:\r\n\r\n<a href=\"http://portal.sliderocket.com/AIMWD/Five-Minute-Framework\">The Five Minute Framework (Slides)</a>\r\n","created_at":"2012-05-09T02:57:12Z","id":5,"published":true,"title":"The Five-Minute Framework","updated_at":"2012-07-13T01:20:37Z"},{"body":"I tutored Rails at CMU West for a bit.  They asked me for recommendations for what the students should be doing to prepare for Rails programming.\r\n\r\nYou know, that's advice I can share with *anybody*.  Here's what I wrote:\r\n\r\n<hr/>\r\n\r\nSure, I can help a bit with this.\r\n\r\nMichael Hartl has an excellent free tutorial which is already given as a resource to the students.  I'd definitely recommend sending them the link earlier so that can start looking at it sooner.  It really is the best thing out there.  Paper books exist but go out of date frequently, cost money and are otherwise less convenient.  The Rails interface changes frequently and paper books haven't done a good job of keeping up with it.\r\n\r\nI'd suggest a programming assignment rather than a reading assignment to get started -- don't tell them how much of Michael Hartl's tutorial to read, tell them what to accomplish and they can read what they need to get it done.  That's better real-world practice anyway.  Similarly, Google is a *fantastically* useful tool for Ruby and Rails programming and every sub-topic, so tell them they can and should use Google frequently, especially for error messages.  It's miraculous how well it works for about 80% of programming and configuration errors.  Again, an excellent habit for later real-world programming.\r\n\r\nI'm pretty sure you also give them a link to the online \"Pickaxe Book\", Programming Ruby (\"http://www.ruby-doc.org/docs/ProgrammingRuby/\"), which should be thoroughly adequate to their early Ruby needs.  There *are* at least some better paper books on Ruby than on Rails.  It changes less frequently.  The later edition of that same book, \"Programming Ruby 1.9\" is also good, and Ruby 1.9 has some changes from 1.8.  But overall, the older free book online is fine.\r\n\r\nI don't have a strong opinion about \"Ruby then Rails\" versus \"Rails then more depth with Ruby\".  You can do Rails programming with very little Ruby sophistication in many cases, but eventually they'll need both.  I haven't seen a compelling argument that one has to come before the other, in either direction.  So make sure the students have access to online references for both and you're probably fine.\r\n\r\nThis probably all sounds very handwave-y.  It should.  Fundamentally, the most valuable skill you can teach them here is how to learn by constant online browsing supported only occasionally by partly-outdated \"authoritative\" materials.  Programming languages are starting to move fast enough that traditional publishing can't support them properly, now that online publishing can at least attempt it.  Online API references, language references, and eventually source code are the things that stay up-to-date, along with understanding of how to browse blogs, StackOverflow and so on for what they need.  Google, in turn, will lead to those blogs, StackOverflow and so on.\r\n\r\nSome fun possibilities for small, easy-with-Rails-type programming tasks:\r\n\r\n  * Put together a blog.  Example recommended feature list:  format post with markdown-or-something, add keywords to each post, search by keyword.  Extra credit: search titles by keyword.\r\n\r\n  * Write a snippet-or-something rating program (examples: submit code and rate it, submit quotes and rate them).  Example feature list: users can submit core-or-quotes-or-whatever, users can vote, program counts votes, show top 10 list of most popular quotes.  Extra credit: allow a user to change their vote later, make sure votes only count one-per-user.  Extra-extra credit: statistical confidence so that you can decide how a new quote with four up-votes and one down-vote should compare to an old one with 35 up-votes and 20 down-votes (an interesting question, with many fun possible answers!).\r\n\r\nFeel free to cut those projects down if they sound too ambitious.  They *are* specifically chosen to map well to what Rails offers, but especially with extra credit they're not necessarily easy.  They are also chosen to be fairly free-form, which I think is good preparation but may be a little much for beginners...\r\n\r\nFeel free to call me at XXX-YYY-ZZZZ if you'd like to discuss further.  I just thought I'd put something in writing to start out.\r\n\r\n<hr/>\r\n\r\n(Already know Rails?  Trying to get better?  I have <a href=\"http://rebuilding-rails.com\">a book you can buy about that</a>...)","created_at":"2012-05-11T23:08:00Z","id":6,"published":true,"title":"Starting Rails programming","updated_at":"2012-05-11T23:08:00Z"},{"body":"<i>I want to feel like a stupid, incompetent, worthless person still gets to look at something nice because I have the physical ability to create it.</i>\r\n\r\nMy wife wrote this about herself -- \"I can have something nice, no matter how awful I am, if I can create something nice.\"\r\n\r\nPeople are foolish and gawky and bad at things and contrary and, and, and...\r\n\r\nSure, okay.\r\n\r\nAnd yet...  It's not how bad your are most of the time.  If at your very best you can make something, then forever after you know you made it.\r\n\r\nNo matter how slow or ugly the snail, it <i>made</i> that lovely spiraling shell.\r\n\r\nYou just have to be good enough to make something once.\r\n\r\nIf I can make one thing and then another, forever after I am a maker.  The grace of the snail is grace indeed, and it's grace enough for me.\r\n\r\nWhat more could I ask?\r\n","created_at":"2012-05-21T15:29:41Z","id":7,"published":true,"title":"The Grace of the Snail","updated_at":"2012-07-13T01:22:50Z"},{"body":"*[Update: while this reflects events as they occurred, vonChurch has reached out to me several times to try and rectify this.  I'm off their list these days, and I haven't heard from their recruiters in awhile.  So at the moment, they're doing fine by me.  I presume they'd also take you off their lists at your request.]*\r\n\r\nI'm easy to find on the internet, so I get 5-10+ job inquiries per week.  Email, LinkedIn, cell phone, the recruiters call to see if I'm looking for a new job.\r\n\r\nFair enough.  As they sometimes point out, they're contacting me with public information.\r\n\r\nThat means they deserve at least as much courtesy as telemarketers, who also use public info, right?  By having a resume they can find, I'm totally asking to be called night and day, work hours and dinnertime.\r\n\r\nEh, sure.  Whatever.\r\n\r\nBut even among recruiters, VonChurch manages to be extra-obnoxious.  Completely inappropriate jobs, repeated inquiries, having three or four VonChurch folks call or email in a row...  I tell 'em I don't want to work in San Francisco, they keep offering San Francisco.  Once I told one of them curtly that I wasn't looking for a job and he <i>called me back to complain</i> because I didn't stop to chat.\r\n\r\nSeriously.  No kidding.\r\n\r\nI don't deal with VonChurch, which is no real loss to me.\r\n\r\nBut wow.  It's amazing when one recruiting company can actually stand out from the pack of headhunters as especially obnoxious.","created_at":"2012-06-21T21:11:18Z","id":8,"published":true,"title":"VonChurch Recruiters are Really Obnoxious","updated_at":"2013-03-11T15:49:04Z"},{"body":"What turns URL params like \"http://site.com/people?name=bobo\" into { :name => \"bobo\" } in Ruby?\r\n\r\nAnd what turns extra-weird Rails or Sinatra params like \"/path?people[][name]=bobo&people[][first_love]=cheese\"?\r\n\r\n<h2>What the Hell is that?</h2>\r\n\r\nGoogling \"rails query param names with square brackets\" doesn't help much.  And Rails doesn't make it easy to find docs for this.\r\n\r\nSo what's going on with the weird params?\r\n\r\nRails uses <a href=\"http://rack.github.com\">Rack</a> to parse them, so it's (mostly) the same in <a href=\"http://sinatrarb.com\">Sinatra</a>, <a href=\"http://padrinorb.com\">Padrino</a> or your <a href=\"http://rebuilding-rails.com\">ruby web framework of choice</a> as well.\r\n\r\n<h2> What Does the Code Say? </h2>\r\n\r\nRack is really poorly documented.  But the query param code is short, so instead of my usual <a href=\"http://rebuilding-rails.com\">&quot;rebuild it&quot;</a> approach, let's go right to <a href=\"https://github.com/rack/rack/blob/master/lib/rack/utils.rb\">the source - Rack::Utils.parse_nested_query</a>:\r\n\r\n``` ruby\r\ndef parse_nested_query(qs, d = nil)\r\n  params = KeySpaceConstrainedParams.new\r\n\r\n  (qs || '').split(d ? /[#{d}] */n : DEFAULT_SEP).each do |p|\r\n    k, v = p.split('=', 2).map { |s| unescape(s) }\r\n\r\n    normalize_params(params, k, v)\r\n  end\r\n\r\n  return params.to_params_hash\r\nend\r\n```\r\n\r\nThat's just parsing the parameters by splitting on <a href=\"http://en.wikipedia.org/wiki/Ampersand\">ampersand</a> and semicolon.  What about the square braces?  They're handled in <tt>normalize_params</tt> (see below for abridged source, or GitHub for full).  It gets called once for each parameter name.\r\n\r\n<h2> What Does normalize_params Do? </h2>\r\n\r\nFirst it checks the param name for anything that's not square-braces, and then read whatever is after that (called \"after\").\r\n\r\nIf the \"after\" is nothing there are no square braces -- great, assign the parameter, you're done.\r\n\r\nIf \"after\" is empty square-braces, that parameter is an array.  Start with it being an empty array, and then append to it.  So if you parsed <tt>p[]=a&amp;p[]=b&amp;p[]=c</tt>, you'd get <tt>{&quot;p&quot; =&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] }</tt>.\r\n\r\nIf \"after\" starts with empty square braces and then has more after it, it's nested.  So the parameter is still an array, and could be something like an array of arrays.  The code handles this by recursing.\r\n\r\nSo if you parsed <tt>p[][a]=a&amp;p[][b]=b&amp;p[][c]=c</tt>, you'd get <tt> { &quot;p&quot; =&gt; [{ &quot;a&quot; =&gt; &quot;a&quot;, &quot;b&quot; =&gt; &quot;b&quot;, &quot;c&quot; =&gt; &quot;c&quot;]}</tt>.\r\n\r\nFeeling a little confused?  Scroll down for another approach -- play with it in irb!\r\n\r\n~~~ ruby\r\ndef normalize_params(params, name, v = nil)\r\n  name =~ %r(\\A[\\[\\]]*([^\\[\\]]+)\\]*)\r\n  k = $1 || ''\r\n  after = $' || ''\r\n\r\n  return if k.empty?\r\n\r\n  if after == \"\"\r\n    params[k] = v\r\n  elsif after == \"[]\"\r\n    params[k] ||= []\r\n    params[k] << v\r\n  elsif after =~ %r(^\\[\\]\\[([^\\[\\]]+)\\]$) || after =~ %r(^\\[\\](.+)$)\r\n    child_key = $1\r\n    params[k] ||= []\r\n    if params_hash_type?(params[k].last)\r\n      && !params[k].last.key?(child_key)\r\n      normalize_params(params[k].last, child_key, v)\r\n    else\r\n      params[k] << normalize_params(params.class.new, child_key, v)\r\n    end\r\n  else\r\n    params[k] ||= params.class.new\r\n    params[k] = normalize_params(params[k], after, v)\r\n  end\r\n\r\n  return params\r\nend\r\n~~~\r\n\r\n<h2> Using irb </h2>\r\n\r\nSince this is Ruby, pop open irb and <tt>require \"rack\"</tt>.\r\n\r\nWe'll define a convenience function called p() because I hate typing.\r\n\r\nThen we'll check to make sure we were right up above:\r\n\r\n```\r\nAthanor:rulers noah$ irb\r\n1.9.3p125 :001 > require \"rack\"\r\n => true \r\n1.9.3p125 :002 > def p(params)\r\n1.9.3p125 :003?>   Rack::Utils.parse_nested_query(params)\r\n1.9.3p125 :004?>   end\r\n => nil \r\n1.9.3p125 :005 > p(\"p[]=a&p[]=b&p[]=c\")\r\n => {\"p\"=>[\"a\", \"b\", \"c\"]} \r\n1.9.3p125 :006 > p(\"p[][a]=a&p[][b]=b&p[][c]=c\")\r\n => {\"p\"=>[{\"a\"=>\"a\", \"b\"=>\"b\", \"c\"=>\"c\"}]}\r\n```\r\n\r\nLooks pretty good.  Let's try skipping the first open brackets:\r\n\r\n```\r\n1.9.3p125 :007 > p(\"p[x]=1&p[y]=2\")\r\n => {\"p\"=>{\"x\"=>\"1\", \"y\"=>\"2\"}} \r\n1.9.3p125 :008 > p(\"p[123]=bobo\")\r\n => {\"p\"=>{\"123\"=>\"bobo\"}} \r\n```\r\n\r\nSo that's what we usually see in Rails with a structure.\r\n\r\nWhat else can we get by playing with this?\r\n\r\n```\r\n1.9.3p125 :017 > p(\"x[][y][w]=1&x[][z]=2&x[][y][w]=3&x[][z]=4\")\r\n => {\"x\"=>[{\"y\"=>{\"w\"=>\"3\"}, \"z\"=>\"2\"}, {\"z\"=>\"4\"}]} \r\n1.9.3p125 :018 > p(\"x[][z][w]=1&x[][z]=2&x[][y][w]=3&x[][z]=4\")\r\n => {\"x\"=>[{\"z\"=>{\"w\"=>\"1\"}}, {\"z\"=>\"2\", \"y\"=>{\"w\"=>\"3\"}}, {\"z\"=>\"4\"}]} \r\n1.9.3p125 :019 > p(\"x[][z][w]=1&x[][z][j]=2&x[][y][w]=3&x[][z]=4\")\r\n => {\"x\"=>[{\"z\"=>{\"w\"=>\"1\", \"j\"=>\"2\"}, \"y\"=>{\"w\"=>\"3\"}}, {\"z\"=>\"4\"}]} \r\n1.9.3p125 :020 > p(\"x[][z][w]=1&x[][z][j]=2&x[][y][w]=3&x[][b]=4\")\r\n => {\"x\"=>[{\"z\"=>{\"w\"=>\"1\", \"j\"=>\"2\"}, \"y\"=>{\"w\"=>\"3\"}, \"b\"=>\"4\"}]} \r\n```\r\n\r\nHave fun!  I hope you've learned some interesting things about Rack parameter parsing...  And how to figure it out next time you see somebody doing something that looks complicated with Rails parameters!","created_at":"2012-06-29T12:38:22Z","id":9,"published":true,"title":"How Does Rack Parse Query Params?  With parse_nested_query","updated_at":"2012-07-18T04:24:11Z"},{"body":"I'm picking up <a href=\"http://github.com/maccman/juggernaut\">Juggernaut</a> after a long hiatus and seeing it with new eyes, which is fun.\r\n\r\nI'm realizing my old <a href=\"http://github.com/noahgibbs/RailsGame\">RailsGame</a> architecture was horrifically overcomplicated.  The rest of you probably knew this a long time ago.\r\n\r\nI'm also realizing that Juggernaut has some problems in a <a href=\"http://en.wikipedia.org/wiki/High_availability\">High Availability</a> setting, but that's a topic for a later post.\r\n\r\nJuggernaut is interesting because I can now see a lot more of the seams where it's clearly a fun test project, not a \"real\" project, and I can see how to fix some of them.\r\n\r\nFor instance:  a JavaScript client can send \"events\", separate from normal messages, and there's a custom event built in, but there are no accessors to send one.  It's just kind of hanging on there, even though that would be ridiculously useful in some cases.  Functionality's there, documentation and convenience aren't.\r\n\r\nAnd you can subscribe to see messages on channels from non-JavaScript clients, but only by subscribing directly to Redis - you can't ask the server to send non-JavaScript clients things on a given channel.  That's adequate for my needs, but sucks in a lot of other cases.\r\n\r\nBasically, Juggernaut thinks of itself as server-push stuff, no full-on pub/sub.\r\n\r\nGood to know.\r\n\r\nNext post I'll be delving very deep into how to hook up Juggernaut in ways it doesn't expect to get around these problems :-)\r\n","created_at":"2012-07-08T16:06:57Z","id":10,"published":true,"title":"Juggernaut with New Eyes - Nitpicks!","updated_at":"2012-07-08T16:06:57Z"},{"body":"Rails <a href=\"http://codefol.io/posts/9-How-Does-Rack-Parse-Query-Params-With-parse-nested-query\">parameter parsing</a> can be hard to understand, but it goes beyond that.\r\n\r\nJust understanding the \"params\" object in your controller actions is a little tricky.  Ever notice how params[:bob] and params[\"bob\"] both work?  The magic type behind that is called HashWithIndifferentAccess.  Yeah, it's a mouthful.  I wish I were making that up, but no.\r\n\r\nThere's a lot of interesting code in Rails with interesting Ruby tricks - so let's de-magic the params object, find some bugs with it and <a href=\"http://rebuilding-rails.com\">get better at Ruby</a>, all at once.\r\n\r\n<h2> The Source </h2>\r\n\r\nI like going straight to the source, so here is <a href=\"https://github.com/rails/rails/blob/808592bae2b83ced018f16d576d41a0059ed302a/activesupport/lib/active_support/hash_with_indifferent_access.rb\">the current version of the file in ActiveSupport</a>.  You can just read, or follow along on GitHub.\r\n\r\nIt's a nice readable 176 lines.\r\n\r\n<h2> What's It Do? </h2>\r\n\r\nIn Rails you can say params[\"people\"] or params[:people], and either way you get the same thing back.  Simple enough, right?  Well, mostly.\r\n\r\nYou can see on <a href=\"https://github.com/rails/rails/blob/808592bae2b83ced018f16d576d41a0059ed302a/activesupport/lib/active_support/hash_with_indifferent_access.rb#L7\">line 7</a> that it inherits from Hash -- Ruby is convenient that way.\r\n\r\nThe biggest magic is on <a href=\"https://github.com/rails/rails/blob/808592bae2b83ced018f16d576d41a0059ed302a/activesupport/lib/active_support/hash_with_indifferent_access.rb#L159\">line 159</a>, in fact, in convert_key().  It just converts any key it sees to a string.\r\n\r\n<a href=\"https://github.com/rails/rails/blob/808592bae2b83ced018f16d576d41a0059ed302a/activesupport/lib/active_support/hash_with_indifferent_access.rb#L159\"><img src=\"/images/11/line_159.png\" alt=\"listing from line 159\" /></a>\r\n\r\nSo HashWithIndifferentAccess is just a regular hash, but any symbol key is converted to a string.  If you put in a key that was, say, nil, nothing would change.\r\n\r\n<h2>Fun Ruby Tricks</h2>\r\n\r\nThis class shows one fun ruby trick - <a href=\"https://github.com/rails/rails/blob/master/activesupport/lib/active_support/hash_with_indifferent_access.rb#L49\">aliasing and replacing a method</a>.  The old hash update and assignment are renamed to regular_update and regular_writer.\r\n\r\n<a href=\"https://github.com/rails/rails/blob/master/activesupport/lib/active_support/hash_with_indifferent_access.rb#L49\"><img src=\"/images/11/line_49.png\" alt=\"listing from line 49\" /></a>\r\n\r\nYou can also see just how many methods you need to override to make your own hash...  Default(), brackets, assignment, update(), key(), fetch(), dup(), merge() and many more.  Making your own variant type is a bad idea unless you <a href=\"http://www.ruby-doc.org/core-1.9.3/Hash.html\">spend some quality time with the core language documentation</a> and see what actually changes.\r\n\r\nBut if you do, it can be really useful, like the Rails params object!\r\n\r\n<h2> What Can Go Wrong? </h2>\r\n\r\nThere are some oddities, like stringify_keys! and symbolize_keys! -- what do you do for a HashWithIndifferentAccess?  They do nothing...  Fair enough.\r\n\r\nBut right next to convert_key is convert_value()...  And it's <i>interesting</i> - if you assign an array to the hash, you can see that they do a .map! and <i>change the array</i> before assigning it.\r\n\r\nThat means if you said:\r\n\r\n``` ruby\r\nmy_array = [ :a, :b, { :c => :d } ]\r\nparams[:item] = my_array\r\n```\r\n\r\nYour array will actually change!  That hash inside will suddenly have indifferent access and it will point to a whole different object!\r\n\r\n(Why?  I spent awhile with git log trying to answer that.  Looks like it's <a href=\"https://github.com/rails/rails/commit/f43e5d160bf9708ad50b58c8168e38579769e024\">because just mapping the Array won't give you the right subclass</a>, so they rewrite the innards instead!  <a href=\"http://codefol.io/posts/13-Unsolvable-Ruby-Problems-Array-map-on-an-Array-subclass-but-keep-the-subclass-\">Map into an unknown Array subclass is an unsolvable problem in Ruby</a>, actually...)\r\n\r\n<h2> Up To Date? </h2>\r\n\r\nNothing stays the same forever.  In Rails, not much stays the same for long.  So here is a <a href=\"https://github.com/rails/rails/blob/master/activesupport/lib/active_support/hash_with_indifferent_access.rb\">link to the latest HashWithIndifferentAccess in GitHub</a>, whenever you go look for it.\r\n\r\n<h2>Enjoy Getting Your Hands Dirty?</h2>\r\n\r\nDo you enjoy code spelunking to learn about Ruby and Rails?  <a href=\"http://rebuilding-rails.com\">I'm writing a book about that</a>.  The first couple of chapters are free and awesome -- sign up below and download them.","created_at":"2012-07-18T03:22:04Z","id":11,"published":true,"title":"Deep Rails: Understanding HashWithIndifferentAccess, Understanding the Params Hash","updated_at":"2012-08-02T04:38:24Z"},{"body":"Some day I would love to put together a Rails Reading Club.  Like a book club, but for the Rails source.\r\n\r\nI love fun weird Ruby trivia, and the Rails code is <a href=\"http://codefol.io/posts/11-Deep-Rails-Understanding-HashWithIndifferentAccess-Understanding-the-Params-Hash\">full of it</a>!\r\n\r\nAs Joel Spolsky said, <a href=\"http://www.joelonsoftware.com/articles/fog0000000053.html\">reading code is like reading the Talmud</a>.  You should get together and pore over the lines and debate properly over the intention and the expression of it.\r\n\r\nSome day I'm going to find the right group of Ubergeeks and we're going to make that happen.","created_at":"2012-07-18T03:26:24Z","id":12,"published":true,"title":"Rails Reading Club","updated_at":"2012-07-18T03:26:24Z"},{"body":"I love looking at problems with \"no solution\" in languages to stretch my mind.  Here's a fun one from Ruby.\r\n\r\nIn Ruby, there's not a good way to map over a <i>subclass</i> of Array and get the same subclass back.\r\n\r\nThat is, if you start with this code:\r\n\r\n``` ruby\r\nclass Array\r\n  def but_doubled\r\n    map { |x| x * 2 }\r\n  end\r\nend\r\n```\r\n\r\nThis will work fine on an Array, but if you call my_array_sub_object.but_doubled, you'll get a plain, bare Array, not a subclass object.\r\n\r\n<h2>Yes There Is, You Meanie!</h2>\r\n\r\nYou may think, \"sure, no problem.  Just re-define #map on the subclass to return the subclass.\"  Ah, but then you don't get to choose whether to return the subclass or Array.  Plus, if the author of the subclass didn't do that you can't do it...  Or you have to monkeypatch.  This <i>is</i> Ruby.\r\n\r\nBut if you don't know what subclass you might be passed, you have a problem.  <a href=\"http://codefol.io/posts/11-Deep-Rails-Understanding-HashWithIndifferentAccess-Understanding-the-Params-Hash\">That happens sometimes, even in code like Rails</a>, and then the <a href=\"https://github.com/rails/rails/commit/f43e5d160bf9708ad50b58c8168e38579769e024\">solutions aren't always pretty</a>.\r\n\r\n<h2>Make a New One</h2>\r\n\r\nYou could create a new object of that subclass and then add the objects back into that.  That works, right?  Well, sometimes.\r\n\r\nIf you don't know the subclass, you don't know what initialize() takes as parameters.  You can hope that it's the same as Array, but it often isn't...\r\n\r\nIndeed, you don't have to ask long before people start telling you to <a href=\"https://groups.google.com/forum/?fromgroups#!topic/ruby-talk-google/stvr3xzIStU\">avoid this entirely and rethink your whole approach</a>.\r\n\r\n<h2>Then... What?</h2>\r\n\r\nI don't have a perfect answer -- nor does Rails, as you saw above.\r\n\r\nBut after thinking of several ways to solve the problem and coming up with a few of your own, do you now know more about Ruby?\r\n\r\nBasically I mostly just like <a href=\"http://rebuilding-rails.com\">messing around in the guts of Ruby</a>.  Do you?\r\n\r\nWhat things are impossible in <i>your</i> favorite language?  What are your favorite half-solutions?\r\n","created_at":"2012-07-18T03:48:33Z","id":13,"published":true,"title":"Unsolvable Ruby Problems: Array#map on an Array subclass, but keep the subclass!","updated_at":"2012-07-18T03:56:54Z"},{"body":"Maybe an engineer you respect just told you to go learn about Rack -- you won't get better at Ruby web stuff until you know what's underneath.\r\n\r\nMaybe you have to write a config.ru to use <a href=\"http://heroku.com\">Heroku</a> and you're thinking, \"what's config.ru?\".\r\n\r\nMaybe you have a deep, nasty Sinatra bug and you're having to dig into the Sinatra stack traces and stuff that might be failing is named \"Rack\".  Why \"Rack\"?\r\n\r\nNow what?\r\n\r\nNow it's time to learn about Rack.\r\n\r\n<h2> Quick Answers to \"What's Rack?\"</h2>\r\n\r\nHere are a few things Rack is.\r\n\r\nIf these don't help, scroll down a bit.  There's far more detail below.\r\n\r\n<a href=\"http://rack.github.com\">Rack</a> is a nice Ruby-fied replacement for <a href=\"http://en.wikipedia.org/wiki/Common_Gateway_Interface\">CGI</a>.\r\n\r\nRack sits between all the frameworks (Rails, Sinatra, <a href=\"http://rebuilding-rails.com\">Rulers</a>) and all the app servers (thin, unicorn, Rainbows, mongrel) as an adapter.\r\n\r\nRack is a convenient way to build your Ruby app out of a bunch of <a href=\"http://railscasts.com/episodes/151-rack-middleware\">thin layers</a>, like a stack of pancakes.  The layers are called middleware.  Or pancakes, why not?\r\n\r\n<h2> Less Hand-Wavey, Please! </h2>\r\n\r\nYour app server (let's say <a href=\"https://github.com/blog/517-unicorn\">unicorn</a>) gets an HTTP request.  Somebody wants to post to http://your_site.com/people/127/fire_with_cause (don't worry, it's <a href=\"http://www.dilbert.com\">Wally</a> -- he'll weasel out of it).\r\n\r\nUnicorn receives the request, parses it, hands it to Rack, and then Rack gives it to your Sinatra app (or Rails, or Padrino, or <a href=\"http://rebuilding-rails.com\">your framework of choice</a>) as a request, usually a method call.  This is where Rails routing takes over, for instance.\r\n\r\nRack keeps Sinatra from having to know anything specific about unicorn.  Or mongrel.  Or thin.  Or lighttpd.  Or any of the many other wacky app servers out there.  That's why it's like CGI for Ruby.\r\n\r\n<h2>But What Good Is It?</h2>\r\n\r\nThat's fine.  But it helps the guys writing app servers, not you.  How does Rack help <i>you</i>?\r\n\r\nRack lets you mess with those layers -- the ones above Rails or Sinatra, the ones underneath, and even the ones in the middle!  That's the whole \"coding your app in thin layers, like a stack of pancakes\" thing from up above.\r\n\r\nRails is actually implemented as a whole bunch of Rack pancakes (same as middleware, but I'm calling them pancakes from here on out).  Here's what that stack looks like, lightly edited:\r\n\r\n```\r\n$ rake middleware\r\nuse ActionDispatch::Static\r\nuse Rack::Lock\r\nuse Rack::Runtime\r\nuse Rack::MethodOverride\r\nuse ActionDispatch::RequestId\r\nuse Rails::Rack::Logger\r\nuse ActionDispatch::ShowExceptions\r\nuse ActionDispatch::DebugExceptions\r\nuse ActionDispatch::RemoteIp\r\nuse ActionDispatch::Reloader\r\nuse ActionDispatch::Callbacks\r\nuse ActiveRecord::ConnectionAdapters::ConnectionManagement\r\nuse ActiveRecord::QueryCache\r\nuse ActionDispatch::Cookies\r\nuse ActionDispatch::Session::CookieStore\r\nuse ActionDispatch::Flash\r\nuse ActionDispatch::ParamsParser\r\nuse ActionDispatch::Head\r\nuse Rack::ConditionalGet\r\nuse Rack::ETag\r\nuse ActionDispatch::BestStandardsSupport\r\nrun RailsGame::Application.routes\r\n```\r\n\r\nEach of those things is a Rack middleware that's doing a little piece of the processing.\r\n\r\nLike Rack::Lock, up near the top?  That keeps more than one thread from running in your Rails server at once so that you don't have to make all your code thread-safe.\r\n\r\nOr Rails::Rack::Logger?  That makes sure your requests get logged to the Rails logfiles.\r\n\r\nAnd what if you added one?  Maybe you could fix a lot of nasty bugs with bad HTTP requests if you could just reject them immediately, before they got a chance to screw up your web framework...\r\n\r\nRack ships with a bunch of middlewares and Rails has a bunch of others that it adds.  You can even insert your own into the stack if you <a href=\"http://guides.rubyonrails.org/rails_on_rack.html\">mess with config.ru</a> in your Rails app.\r\n\r\nA rack pancake can be as simple as <a href=\"http://rack.rubyforge.org/doc/Rack/Config.html\">Rack::Config</a> where you hand it a block of code and it runs it on each request.  Or it can be as complex as <a href=\"http://rackamole.com/\">RackAMole</a> which logs every request to a MongoDB instance you have to set up.  Or way, way more complex than that.\r\n\r\nThere are <a href=\"https://github.com/rack/rack/wiki/List-of-Middleware\">lots of fun pancakes</a> out there.\r\n\r\n<h2> How Do I Use It?</h2>\r\n\r\nMostly it's done for you.  Rails and Sinatra already have Rack support.  You can modify config.ru in a Rails/Sinatra/whatever app if you want to <a href=\"http://railscasts.com/episodes/151-rack-middleware\">add Rack pancakes</a> to your app.\r\n\r\nBut you don't have to do anything at all for basic Rack support if you're already using a Rack framework.\r\n\r\nWhat if you want to write a Rack-based framework and learn all the best tricks?  That's a longer answer.  Luckily I'm writing a <a href=\"http://rebuilding-rails.com\">book with all those details</a>.\r\n\r\nFor the first two chapters, sign up below:\r\n","created_at":"2012-07-22T23:37:26Z","id":14,"published":true,"title":"\"What is Rack?\":  A Primer","updated_at":"2012-08-04T01:08:40Z"},{"body":"<a href=\"http://codefol.io/posts/14--What-is-Rack-A-Primer\">Rack</a> comes with a fair bit of built-in middleware that you can use to put together a simple app frame.  Unfortunately, <a href=\"http://rack.rubyforge.org/doc/Rack/Auth/Digest/MD5.html\">Rack authentication's documentation is pretty bad</a>, so let's see some simple, self-explanatory examples, shall we?\r\n\r\n## Config\r\n\r\nWe'll need a config.ru file for this, and you'll need Rack installed.  Here's how you want config.ru to look, at the beginning:\r\n\r\n```\r\n# config.ru\r\nrequire \"rack\"\r\n\r\nrun lambda { |env|\r\n  [200,\r\n    {'Content-Type'=>'text/plain'},\r\n    [\"Hello, World!\"]\r\n  ]\r\n}\r\n```\r\n\r\nThis is as simple as Rack apps get.  Return success (200), a content-type header that says it's text, and \"Hello, World!\" &mdash; which has to be in a list because Rack says so.\r\n\r\nWhat's the easiest way to put a password in front of this?\r\n\r\n## Simple Middleware\r\n\r\nRack comes with nice simple built-in authentication modules.  Here's how you use the Basic auth middleware:\r\n\r\n```\r\nrequire \"rack\"\r\n\r\nuse Rack::Auth::Basic, \"Hello, World\" do |username, password|\r\n  'secret' == password\r\nend\r\n\r\nrun lambda { |env|\r\n  [200,\r\n    {'Content-Type'=>'text/plain'},\r\n    [\"Hello, World!\"]\r\n  ]\r\n}\r\n```\r\n\r\nThe \"use\" statement says to include the password middleware.  You can see that the password is \"secret\" with any user, so type \"secret\" as the password in your browser!  Just return true if they pass the check or false otherwise.\r\n\r\nYou can also use Digest authentication with Rack::Auth::Digest::MD5.  It wants to pass you the username and have you return the password, which it hashes:\r\n\r\n```\r\nrequire \"rack\"\r\n\r\n# Long random string.  Use a better one than this.                              \r\nopaque = \"1234567890\"\r\n\r\nuse Rack::Auth::Digest::MD5, \"Hello, World\", opaque do |username|\r\n  'secret'\r\nend\r\n\r\nrun lambda { |env|\r\n  [200,\r\n    {'Content-Type'=>'text/plain'},\r\n    [\"Hello, World!\"]\r\n  ]\r\n}\r\n```\r\n\r\nThat looks the same to you...  But it doesn't send your password in the clear!\r\n\r\nNotice that you have to set an \"opaque\" -- that's a long secret key which should always be the same for your app.  I'd recommend you randomize it, not use \"1234567890\" :-)\r\n\r\n## Authentication\r\n\r\nThese are the only authentication methods Rack supports.  That makes sense -- they're the only authentication methods that most browsers support properly.\r\n\r\nNow that you have some decent examples, go forth and authenticate your Rack applications!\r\n\r\nWhat Rack applications?  That's anything with Rails, Sinatra or <a href=\"http://rebuilding-rails.com\">your framework of choice</a>, of course!\r\n\r\nIf you like playing down in the Rack internals, have I mentioned that I'm <a href=\"http://rebuilding-rails.com\">writing a book called \"Rebuilding Rails\"</a> about that?\r\n","created_at":"2012-07-23T00:00:25Z","id":15,"published":true,"title":"Rack Authentication Middleware","updated_at":"2012-08-03T03:30:36Z"},{"body":"There's a lot to developing software on a team that universities don't traditionally teach you.  If you're already strong at theory and skills and you know you also need lots of practice, what else should you be doing to prepare?\r\n\r\nDeveloping on a team requires a lot of people skills.  Junior software developers are often \"junior\" specifically because they lack those skills - it's not uncommon to see junior developers with better \"hard\" skills than much higher-ranking and more senior developers.  Indeed, it's easy to become bitter about that as a junior developer because you can't yet see what separates you from them.\r\n\r\nHere are some examples of that separation:\r\n\r\n- More senior developers have been doing this longer and can often estimate the difficulty of a task with greater accuracy.  This is requires so that managers of various kinds have a better idea of when you'll be delivering that software.  That's utterly vital in business, but often treated as unimportant by developers (\"it's done when it's done!\").\r\n\r\n- More senior developers often better understand the business climate surrounding their software, and can prioritize features and effort independently because they know what parts of their software are most vital to actually *selling* that software.  This is often unrelated to raw functionality.\r\n\r\n- More senior developers often understand other roles in the company better (sales, marketing, management, etc.) and can better optimize their communication and even their software to help those people.  How do you make the software easy to demo impressively so that marketing can do better with it?  How do you make it more obvious *as you build* which parts aren't done yet, and how done they are, so that management and non-technical people understand progress?  How do you build software so that it's easy to see its current state for non-technical folks like customer support?  How do you make it tool- and GUI-friendly so non-technical people can interact with it?\r\n\r\n- Great senior engineers have a deep love of documentation and automation.  That's because other people adopt your stuff more readily if your code has it, and because it's far easier for you to pick something up later if you made it trivial to dig in and get started.\r\n\r\n- More senior engineers can often pick up new tools and codebases quickly because they spend a lot more time understanding and maintaining bad code.  There are many sub-skills to this - it's complicated to learn well, and mostly you just need a lot of experience at it.\r\n\r\nSo, sure, that's a fun little sales pitch for experienced senior developers.  But what do *you* do to become one?\r\n\r\n- Pick up bad code.  There's a ton of bad open-source out there, it doesn't specifically have to be corporate bad code.  Fork something abandoned on GitHub with a toolset you don't usually use and start playing with it.  Build some of that documentation and automation into it so that it's easy to get started.  And \"bad\" doesn't have to be pervasive.  Just pick something that's not terribly popular without an easy on-ramp for new developers.\r\n\r\n- Read business books, especially those aimed at marketing, sales, management and product/project management.  Blog posts help too, but nothing beats a full book.  This isn't the best way to learn other people's roles, but it's (usually) easier than tracking them all down and beating it out of them :-P\r\n\r\n- Use a real development methodology when you're working, down to writing out task cards, estimating tasks and moving the cards between columns on a board.  You'll feel stupid doing it, but nothing beats having actually worked that way.  Scrum and Extreme Programming are good choices that aren't too hard to get started with and don't add too much overhead.  The reason to do this, by the way, is to get good at estimation.  The rest of the process may help a bit, but by far the most important part is that you actually break up projects into sub-tasks and estimate those sub-tasks.  Then see how close you came when you're done.\r\n\r\n- Read case studies of companies, successes *and* failures.  You can do this with business books, but read up on current (business) events, too.  You're trying to get a feel for how products succeed or fail.  That's a lifetime of work to do really well, but if you put fifteen spare minutes into it once a week, you're still ahead of most developers.\r\n\r\nThen, do all the same things you know you need to.  As you say, develop.  If you come up with projects that may be useful and then promote them, that will teach you a huge amount of the rest.\r\n\r\nOh -- and make sure you're the one that has to maintain them!  That's the other bit you should be learning, basic operations!\r\n","created_at":"2012-07-26T17:03:39Z","id":16,"published":true,"title":"Developer, not Coder","updated_at":"2012-07-26T17:03:39Z"},{"body":"MiniTest 3.3.0 seems broken in some (fairly simple-looking) cases that 3.2.0 didn't break.  The presenting error is below.\r\n\r\nIt's claiming that an auto-generated Test Suite doesn't have a \"run\" method.  I haven't <a href=\"https://github.com/seattlerb/minitest/commits/master\">looked through enough diffs</a> to be sure what the problem is.\r\n\r\nA simple workaround is to go back to MiniTest 3.2.0, possibly by adding a \"~>3.2.0\" to your Gemfile.\r\n\r\n```\r\n~/gems/minitest-3.3.0/lib/minitest/unit.rb:826:in `block in _run_suite': undefined method `run' for #<ArrayTest:0x007f859811fa10> (NoMethodError)\r\n```\r\n","created_at":"2012-07-27T20:45:54Z","id":17,"published":true,"title":"MiniTest 3.3.0 breaks some things...","updated_at":"2012-07-27T20:46:52Z"},{"body":"Most people don't know anything about a given skill.  But it's not as simple as \"I know\" or \"I don't know\".  Skill is in categories -- beginner, novice, intermediate, master or whatever.\r\n\r\nLately I have to learn a lot all at once, <a href=\"http://rebuilding-rails.com\">what with the whole selling a book thing</a>.  So I have far more skills to learn than time to do it.\r\n\r\nSo I'm picking skills one at a time and bringing them up by one standard deviation.\r\n\r\nThe average knowledge of the skill is near zero.  One standard deviation up is a beginner.  The next deviation up is a bit higher.  Each deviation takes longer, and I could put years of effort into most of these skills...\r\n\r\nBut I don't have to put in years.  I can just bring my skill up by one standard deviation and see what happens.  If it helps, I should put in more effort later.  It goes on my \"to do\" list.\r\n\r\nAnd if not, there's never a shortage of awesome-looking skills to learn.","created_at":"2012-07-31T01:08:35Z","id":18,"published":true,"title":"Bring Your Skills Up A Standard Deviation","updated_at":"2012-07-31T01:08:35Z"},{"body":"<a href=\"http://kalzumeus.com\">Patrick McKenzie</a> mentioned in a <a href=\"http://news.ycombinator.com/item?id=4280503\">Hacker News comment</a> that it's easy to leak database information with a timing attack, and that it's silly to secure that information very much in other ways if you aren't going to block the timing hole.\r\n\r\nHe says \"Some folks think there are trivial ways to defeat timing attacks. You are either mistaken or you have a very different view of the word \"trivial\" than I do.\"\r\n\r\nHe is correct.\r\n\r\nMuch debate followed, often of the \"just pad the total time up at the end and then they can't tell!\"  That is, many people think this is a trivial thing to defeat.\r\n\r\n<a href=\"http://news.ycombinator.com/item?id=4282991\">They are wrong</a>.\r\n\r\nHere's the problem:  your web site is a system with large, complex pieces.  Those pieces operate in a mostly-predictable way.  Query an account?  That hits the database with the same query every time.  Reset a password?  Also a known set of database queries.  Queue a task to reset the password?  There's a delay, but it's always the same set of database queries.\r\n\r\nThis isn't predictable in that if an attacker does it once, there's lots of sources of noise.  The queueing system will be doing other things.  The web site will have other load.  They get a single measurement, and that measurement is probably garbage.\r\n\r\nBut they don't just get one measurement on that same machine right at the time.\r\n\r\nThey can pick <i>any visible part of your system</i> and see how it responds.\r\n\r\nOther URLs?  Sure.  Different sites that share a queueing system?  Yup.  Do other things that enqueue a task and check the delay?  Yup, they can do that.  SSH in and see how long it takes to give a prompt?  Often, yes.\r\n\r\nYou're not just fixing a single point where the attacker can check the behavior of your system.  The attacker can pick *any* part of your system.\r\n\r\nIf you pad out the time it takes for the query with busy-waiting, other URLs will be slowed down.  If you pad it out with sleeping, they won't.  Both are different depending on how long the query actually took.  If resetting a password requires more queries, or queries to different tables, than if the password doesn't exist then some URLs (that use those tables) will be slowed down.\r\n\r\nAgain, quoting Patrick:\r\n\r\n<i>The attacker wins with microsecond precision over the open Internet and nanosecond precision over the local network, which is plausibly achievable on all of the cloud providers than HNers like to host their apps at. Microsecond precision is enough to discriminate between \"record in DB\" and \"record not in DB\" on many plausible application architectures, even if your HTML/headers returned are exactly identical for the two cases (and they frequently won't be out of the box).</i>\r\n\r\nHis measurements there assume the attacker can check repeatedly.  But an attacker who knows statistics can check again and again and can, eventually, determine the difference at microsecond precision over the 'net.\r\n\r\nCan't you just block that attacker?  Not if they use a botnet or enough forged IPs.  Can't you rate-limit them?  Only if you can let them lock out all your real users.\r\n\r\nThe problem is that computers are hugely, delicately interconnected.  What *would* solve these problems are highly-enforced resource quotas with no sharing between all your tasks.\r\n\r\nOf course, then everything is unshareable and your costs go way up.\r\n\r\nDefeating timing attacks is really, really hard.\r\n\r\nBy the way:  what *would* work is if you could pad out the total work with <i>exactly the same load</i> between hits and misses on all of your infrastructure.  Always queue a job, always return a user (but a false one), always make the database objects, all the way through the whole process.  Do not allow a full nanosecond of difference between the two.\r\n\r\nAnd that's the part that's really, really hard.\r\n\r\nDo you like deep technical minutiae and understanding your whole application stack deeply?  I'm writing <a href=\"http://rebuilding-rails.com\">a book that can help with that</a>...","created_at":"2012-08-01T00:40:08Z","id":19,"published":true,"title":"Timing Attacks Are Really Tricky","updated_at":"2012-08-01T00:41:40Z"},{"body":"Awkwardly, I just emailed out links to <a href=\"https://rebuilding-rails.com/payment_page.html\">pay for Rebuilding Rails</a> with \"http://\" in front.  Like, not \"https://\".\r\n\r\nNot so good.  I was immediately called on it by one of my list subscribers, <a href=\"http://codefol.io/posts/2-Developers-Are-You-Sure-That-Payment-Page-is-Secure-\">using my own words</a>!   Can I just say how much I love you guys for actually paying attention?  People on my mailing list rule.\r\n\r\nI considered emailing out an abject apology and hoping I never did it again, until it hit me...\r\n\r\n\"Hey, wait!  I should never allow insecure links to that from *anybody*.  Can't I just force it https?\"\r\n\r\nYup.  Here's what I used:\r\n\r\n```\r\n    if(window.location.protocol != 'https:') {\r\n      location.href = location.href.replace(\"http://\", \"https://\");\r\n    }\r\n```\r\n\r\nThat's not as good as redirecting to https directly in NGinX, which I may also do.  But it's a great quick fix, and it makes sure that the mistake will be fixed if it happens again.\r\n","created_at":"2012-08-01T03:40:22Z","id":20,"published":true,"title":"Automatic HTTPS JavaScript Redirect","updated_at":"2012-08-05T22:02:35Z"},{"body":"[Update: Rebuilding Rails is finished, and yes, the exercises are in it.]\r\n\r\nA reader asked me whether the book was entirely cut and paste or if there would be exercises that required actually writing new code in <a href=\"http://rebuilding-rails.com\">Rebuilding Rails</a>, or only cut-and-paste.  Here's my response:\r\n\r\nThere are a few small exercises in chapter one, and will be more and more extensive ones later.  However, I'm not sure if it will be extensive enough for what you want.\r\n\r\nFor instance, in the new ORM chapter there will be an exercise on adding column accessors via method_missing, which requires a good basic grasp of what's going on.\r\n\r\nThere will be 3-5 exercises of about that difficulty (many a bit easier, a few significantly harder) in each chapter.  The book is structured so that your framework gets better with each exercise, but no later chapter depends on the exercise being finished.  So if you skip them, you get the pure cut-and-paste experience but it still works.  If you do all of them, you'll have a much more usable framework.\r\n\r\nThe downloadable sample code just gives the base cut-and-paste framework, not the exercises.\r\n","created_at":"2012-08-01T16:15:55Z","id":21,"published":true,"title":"Rebuilding Rails Exercises","updated_at":"2013-01-04T16:28:21Z"},{"body":"<i>Want just the graphs and not a whole freaking biography?  Scroll down to the bottom.</i>\r\n\r\nHoping to sell a product?  Rather start by using free services until you have some actual revenue?  Curious how that will work out?\r\n\r\nHere's how it did for me &mdash; along with the various good and bad luck along the way.\r\n\r\n## Selling to Developers\r\n\r\nI started writing an ebook in February called \"Rebuilding Rails\".  The idea is that the reader builds a <a href=\"http://rubyonrails.org\">Rails</a>-like framework starting from <a href=\"http://rack.rubyforge.org\">Rack</a> (Ruby's web compatibility layer).  They understand Rails better because they've built something similar.  The book is (I hope) useful for all Ruby web developers &mdash; lower-level Ruby web stuff is horribly documented and there's not a lot of good information about how to build on it.\r\n\r\nAs of this moment it has made me $1094.91 in revenue after processing fees, or about $1000 in profit.\r\n\r\nIs an ebook really a product?  Yes.  Also, this isn't an ebook sold through Amazon or even O'Reilly - I'm selling it like I would sell software.  I market it all by myself.  I also fully wrote and entirely maintain the web site that backs it.  I'm doing all the traffic and conversion tracking on my own and I'm generally using the ebook as a sort of tutorial.  When I start selling software I'll already know the basics of marketing, billing and whatnot.  You may have a head start too if you read this post.\r\n\r\nIt's also a product in that I started selling it in beta at a discount.  This isn't a single \"it's done!\" book launch, but a long series of \"buy before it's done!\" blog posts and marketing emails.  I'll tell you whether that works in a few months, shall I?\r\n\r\nI'm actually writing it as part of <a href=\"http://unicornfree.com/\">Amy Hoy's</a> <a href=\"http://unicornfree.com/30x500/\">30x500 class</a> in product design.  Not only was it a great way to survey the audience in advance, but the alumni list is tremendously supportive.  Great folks!\r\n\r\n## February\r\n\r\nI already had an unused <a href=\"http://mailchimp.com\">MailChimp</a> account.  I built a sales site (<a href=\"https://rebuilding-rails.com\">rebuilding-rails.com</a>) and a lightly-edited email signup form.  My design skills are crap but my audience is Rails programmers, who are more forgiving than random consumers.\r\n\r\nI started writing my book in Google Docs (pro tip: don't).  I finished the first chapter in about a night and just kept going.\r\n\r\nI knew I wanted to put up the first few chapters for free download, so I was racing to get them done and get people on the email list.  The plan was to sell a beta ebook at a discount and gradually raise the price as it neared completion -- that's still the plan.\r\n\r\nBy the end of February I had four people on my email list, all of them people I knew and had told in person.  Well, okay, three that I knew plus me.\r\n\r\nI also emailed <a href=\"http://jstorimer.com\">Jesse Storimer</a>, the author of <a href=\"http://workingwithunixprocesses.com/\">Working with Unix Processes</a>, out of the blue.  I asked him what selling an ebook was like.\r\n\r\nHe wrote back!  He loved the book!  He has been, and continues to be, wonderful and supportive despite never having seen me in person.  You may note a prominent quote from him on the sales page.\r\n\r\n## March\r\n\r\nI worked occasionally on the book through March -- \"occasionally\" because I'm a dad, I have a <a href=\"http://ooyala.com\">day job with a great company</a> and, hey, I'm a busy guy.\r\n\r\nThe sales site went from \"utter crap\" to \"good enough to not repel somebody really interested\" over this time, and Jesse gave me a great quote to headline with.  Amy Hoy, my teacher in 30x500, tweeted about my site.  I got around 30 email signups.\r\n\r\nI sent out an introductory email, which MailChimp tells me nobody ever opened.  So if it's still buried in your inbox then it's a collector's item!\r\n\r\nI wasn't selling the book yet.  I was terrified about asking people for money.  I was trying to figure out how to set up <a href=\"http://stripe.com\">Stripe</a> in a way that wasn't likely to bankrupt me accidentally when some hideous bug happened.  Stripe is very good at what they do, which didn't stop me from worrying.\r\n\r\nI switched from Google Docs to Apple Pages during this time because Pages has tolerable PDF export (GD does not).  I upped the font size and generally made the book prettier, and discovered that a horrible three-way merge of content doesn't make my life better.  Apple Pages was <i>not</i> a seamless transition, though I'm glad I did it.\r\n\r\nI switched on Stripe payments late in March, having emailed that I would do so.  MailChimp says nobody opened that email, either.  I was so bummed about email and how it was (not) working out that I didn't email anybody again until late July.\r\n\r\nI was up to 39 list subscriptions, though.\r\n\r\n## April, May, June\r\n\r\nThese months were busy, but mostly not with the book.  I churned through some chapters, worked hard on it and procrastinated like you wouldn't believe on doing any actual marketing.\r\n\r\nI posted maybe two or three times in various places that I was writing the book.  I got a tiny bit of organic Google traffic.  But let's round my amount of promotion down to zero, shall we?\r\n\r\nIt didn't help that mid-May through mid-June were eaten entirely by Diablo 3.\r\n\r\nStill, the email list grew to 47, then 48, then 49 people in consecutive months.  Early July looked likely to be similar.\r\n\r\n## In Which I Get Frustrated\r\n\r\nI had written a fair bit - I wanted a ten-or-so-chapter book and had written nearly seven of that, including two fairly difficult ones.  Progress looked good.  My reviewers didn't really review (I'm told that's normal).  I had retooled my blog and semi-accidentally flushed the old one.  Goodbye, blog.angelbob.com.  Nobody misses you.\r\n\r\nI was complaining to the 30x500 group that nobody seemed interested in my sales site (have you seen it?  I don't blame them) and that I just needed to get the book done, validation or no.  I was very sensibly argued out of this.  But I still felt quite bitter about the whole thing.  It's easy to feel bitter when you're procrastinating work you really don't want to do.\r\n\r\nI won't say \"things looked grim.\"  I have a day job, so I can pretty much skip the cheap \"will he <i>starve</i>?\" drama.  But things looked unlikely to change.\r\n\r\nStill, by early July I actually wrote a <a href=\"http://codefol.io/posts/2-Developers-Are-You-Sure-That-Payment-Page-is-Secure-\">couple</a> of <a href=\"http://codefol.io/posts/3-BigCo-New-Employee-Training-Inside-Voice\">blog</a> <a href=\"http://codefol.io/posts/5-The-Five-Minute-Framework\">posts</a>.  The first one was likely to alienate my audience (it was even worse pre-editing!) and the other two weren't terribly interesting.\r\n\r\nThe idea was that these would magically attract my audience, despite me having no traffic.  I posted one of them to Reddit and Hacker News and then basically ignored it.  Reddit and HN ignored it, too.\r\n\r\nBut on July 12th I wrote a wonderfully persnickety and fiddly <a href=\"http://codefol.io/posts/9-How-Does-Rack-Parse-Query-Params-With-parse-nested-query\">post on parsing URL params in Rack</a>, which suddenly turned everything around.  Thanks to <a href=\"http://clean-ruby.com/\">Jim Gay</a>, Reddit and <a href=\"http://rubyflow.com\">RubyFlow</a> for helping me put all the pieces into the right places\u2026\r\n\r\n## A Purchase!\r\n\r\nSpecifically, on July 13th some guy I didn't know tried to purchase my book.  And then, when it didn't work, Googled me and emailed me to complain.  I don't know how long it would have taken me to notice otherwise.  I'd probably have mistaken the log entry for me testing the page.\r\n\r\nI thought it was a prank at first, honestly.\r\n\r\nAfter debugging the site I emailed him an abject apology and a current PDF of the whole book.  I let him know that I thought things worked now.  I wasn't absolutely sure - it costs money to order an ebook from yourself and *really* really check!\r\n\r\nThey say that as a single random person selling a product you're supposed to make it clear that it's just you.  Treat it as an advantage, they say.  Let's just say that I do that a <i>lot</i> and so far it hasn't burned me badly.  I recommend it!\r\n\r\nThe fellow in question was absolutely wonderful and, the next day, actually ordered my book.  I was ecstatic and wrote <a href=\"http://codefol.io/posts/11-Deep-Rails-Understanding-HashWithIndifferentAccess-Understanding-the-Params-Hash\">an even fiddlier blog post</a> to celebrate.\r\n\r\nI also wrote <a href=\"http://codefol.io/posts/13-Unsolvable-Ruby-Problems-Array-map-on-an-Array-subclass-but-keep-the-subclass-\">a linkbait post on a genuine but minor Ruby language design problem</a> and posted it to Reddit.\r\n\r\nReddit hated it, downvoted me mercilessly and sent me a bunch of traffic and email list subscribers.  Yay?\r\n\r\nI got another purchase on July 17th and another on the 20th.  I was still checking my Stripe account manually and promised to email people their ebook \"within about a day\" on the payment page.  Weirdly, it was purchase #12 before anybody else complained about delivery time.  Why don't you people hate me more?\r\n\r\nBut developers kept looking at my posts.  I kept posting some of them to Reddit and RubyFlow.  Then I wrote <a href=\"http://codefol.io/posts/14--What-is-Rack-A-Primer\">probably my most useful post so far</a>, in my own opinion.\r\n\r\nI was still working on automating everything as quickly as I could\u2026  Sure, things were working, but I worried at every hour of the day and night.  Was I disappointing my hypothetical customers?  I'm a dad, worrying all night isn't out of my way.\r\n\r\n<img src=\"http://s3.amazonaws.com/Codefolio/22/FirstSales.png\" alt=\"First sales\" />\r\n\r\n## The Flood\r\n\r\nI had a few sales under my belt and a little traffic (see graph above).  Clearly this was the beginning of \"traction\".  So I resolved to raise my prices.  I <a href=\"http://us2.campaign-archive2.com/?u=c5569fb6471a3e64be2aa1466&id=db9972d283&e=[UNIQID]\">emailed my 96 subscribers</a> late on July 27th to let people know they had a week left before the price rose from $30 to $35.  I also completely left out any link to the sales site from the newsletter.  D'oh!\r\n\r\nOn July 30th, <a href=\"http://rubysource.com\">RubySource</a> found my book somehow.  Thanks, RubySource!  That was worth a few sales and a lot of subscriptions.  By the end of July I was at 118 subscribers.\r\n\r\nI also finally automated sending out people's ebook immediately when they paid me.  That was kind of important ;-)  I <a href=\"http://us2.campaign-archive2.com/?u=c5569fb6471a3e64be2aa1466&id=91cc6cf613&e=[UNIQID]\">emailed 119 people about it</a>, mostly because it was also two days before the price hike.  This time I <b>did</b> include a link to <a href=\"https://rebuilding-rails.com/payment_page\">buy the book</a>.\r\n\r\nWell, almost.  After having <a href=\"http://codefol.io/posts/2-Developers-Are-You-Sure-That-Payment-Page-is-Secure-\">written an impassioned post</a> about how you should never put your credit card info into a page without a green lock, I forgot to type \"https\" in the email.  Somebody emailed me back, mentioning my hypocrisy, immediately.  Have I mentioned that I love writing for developers?  I really do.\r\n\r\nI thought fast and fixed it <a href=\"http://codefol.io/posts/20-Automatic-HTTPS-JavaScript-Redirect\">with a quick JavaScript patch</a> before anybody else noticed.  Abject apologies to my customers have served me well, but it's nice to make one fewer!\r\n\r\n## Things Slow Down\u2026  Wait, No They Don't\r\n\r\nI had fun with all of this and sold hundreds of dollars of unfinished ebooks...  But I was looking forward to things slowing down a bit.  The book is fun but we're having crunch time at work, my kids are having a difficult week and there's (always) lots to do besides obsessing over Google Analytics.\r\n\r\n<img src=\"http://s3.amazonaws.com/Codefolio/22/EarlySales.png\" alt=\"Early sales\" />\r\n\r\nI sent my <a href=\"http://us2.campaign-archive2.com/?u=c5569fb6471a3e64be2aa1466&id=a296337a0a&e=[UNIQID]\">final pre-price-hike email to 152 people</a> on Thursday night, got five sales, hiked the price on Friday morning, and breathed a sigh of relief.\r\n\r\nThen a guy purchased for the higher price, $35.  Huh.  I angsted over whether to refund his $5 since he was clearly trying to get in on the sale.  I assume?  And then somebody else ordered.  And another.\r\n\r\nBy the end I had 5 orders pre-price-hike and 5 more after.  Huh?\r\n\r\nI had emailed <a href=\"http://peterc.org\">Peter Cooper</a> earlier, and I discovered that he had mentioned me in <a href=\"http://rubyweekly.com\">Ruby Weekly</a>.  Ohhhhh\u2026\r\n\r\n<img src=\"http://s3.amazonaws.com/Codefolio/22/BigSales.png\" alt=\"Big sales day - price hike and Peter Cooper\" />\r\n\r\nI also finally started tracking more of my conversion rates rather than just eyeballing them.  But I have my first early numbers &mdash; around 2% conversion from hitting Rebuilding-Rails.com to successfully buying the book, and between 15% and 50% (!) from Rebuilding Rails' front page to hitting the \"Buy It\" button (the pale blue line on the graph below).\r\n\r\n<img src=\"http://s3.amazonaws.com/Codefolio/22/ConversionRates.png\" alt=\"Conversion rates from front page of Rebuilding Rails to a purchase\" />\r\n\r\n## Done for a bit?\r\n\r\nYesterday my sales pushed just over the $1000 mark.  I'm at 223 list subscribers.  I'm taking all this as clear validation of my book idea, but it's not yet <a href=\"http://blog.studiofellow.com/2012/05/31/30k-ebook-sales-in-2-months/\">success in the same league as a few of my classmates</a> ;-)\r\n\r\nI'll keep publishing blog posts as I go &mdash; Rack <i>is</i> really poorly documented, and Rubyfolk need better tutorials for it.  But I expect to have a month or so of head-down writing to finish the rough draft of all the chapters and start polishing the rest.\r\n\r\nThis blog post is taking a fair bit of writing time, but I'll tell you what.  You guys buy lots of the book in the next six months and I promise I'll post again with more numbers, okay?  <b>*grin*</b>\r\n\r\n(Open these graphs in a new tab for a larger version.)\r\n\r\nTraffic to this blog over that time:\r\n\r\n\r\n<img src=\"http://s3.amazonaws.com/Codefolio/22/CFTraffic.png\" alt=\"Codefol.io traffic numbers\" />\r\n\r\nTraffic to Rebuilding-Rails.com over that time:\r\n\r\n<img src=\"http://s3.amazonaws.com/Codefolio/22/RRTraffic.png\" alt=\"Rebuilding-rails.com traffic numbers\" />\r\n\r\nMailChimp subscribers:\r\n\r\n<img src=\"http://s3.amazonaws.com/Codefolio/22/MailSubscribers.png\" alt=\"Mailchimp subscriptions by month\" />","created_at":"2012-08-06T00:32:20Z","id":22,"published":true,"title":"My First Thousand in Product Revenue:  Story and Numbers","updated_at":"2012-08-07T15:52:12Z"},{"body":"I proposed a talk for the Golden Gate Ruby Conference, and got turned down.  Usually that's it, but the excellent and classy Josh Susser offered to say why he'd turned people down (woot!).  He said:\r\n\r\nI think we had a good idea of what your talk would be about. But this year we are a bit tired of testing focused talks, and we were also skeptical that your talk would have a half hour of content.\r\n\r\nWow!  Josh Susser, Leah Silber and Jim Meyer told me I couldn't be enough of a blowhard to talk about mocking Time.now for 30 minutes?\r\n\r\n<img src=\"/images/23/challenge_accepted.jpeg\"\r\n   alt=\"challenge accepted\" />\r\n\r\nIt'll take me more than one blog post, though!  Expect this to be a series.  A 30-minute talk's worth of content would be quite a long post...\r\n\r\nTo start with:\r\n\r\n## Two-Week Tests in Thirty Seconds: Mocking Time.now and Threads\r\n\r\nIf you have sleeps or loops that check time in your library and you want to test that, it can take awhile.  Let's see an example:\r\n\r\n``` ruby\r\n# mylib.rb\r\nclass MyLib\r\n  def bar\r\n    # No-op\r\n  end\r\n\r\n  def maybe_update\r\n    t = Time.now\r\n    if !@last_check || (t - @last_check > 10)\r\n      @last_check = t\r\n      do_something\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nThis would normally take 10 seconds before it will call do_something again.  That can make it hard to call it in consecutive tests, or to test that its update logic is working.  Enter the magic of mocha and mocking:\r\n\r\n``` ruby\r\n# test_mylib.rb\r\nrequire \"./mylib\"\r\nrequire \"test/unit\"\r\nrequire \"mocha\"\r\n\r\nclass TestMyLib < Test::Unit::TestCase\r\n  def setup\r\n    @obj ||= MyLib.new\r\n  end\r\n\r\n  def test_maybe_update\r\n    @obj.expects(:do_something)\r\n    @obj.maybe_update\r\n  end\r\n\r\n  def test_still_update_if_bar_happens\r\n    @obj.expects(:do_something)\r\n    @obj.bar\r\n    @obj.maybe_update\r\n  end\r\nend\r\n```\r\n\r\nThis test fails if you run both, even though it's fine if you run just one.  It *looks* like calling bar, a no-op, makes maybe_update fail, even though it doesn't.  Problems like these can be real head-scratchers, especially if the two tests are in different files.  \"Hey, this test worked fine on my machine but it's failing on the build machine!\"  No.  You were running just that one file on your machine, and the build machine runs everything.\r\n\r\nLet's see how mocking Time.now can fix this:\r\n\r\n``` ruby\r\nrequire \"./mylib\"\r\nrequire \"test/unit\"\r\nrequire \"mocha\"\r\n\r\n# test_mylib.rb\r\nclass TestMyLib < Test::Unit::TestCase\r\n  def setup\r\n    @obj = MyLib.new\r\n    @t ||= Time.now\r\n    @t += 30\r\n    Time.stubs(:now).returns(@t)\r\n  end\r\n\r\n  def test_maybe_update\r\n    @obj.expects(:do_something)\r\n    @obj.maybe_update\r\n  end\r\n\r\n  def test_still_update_if_bar_happens\r\n    @obj.expects(:do_something)\r\n    @obj.bar\r\n    @obj.maybe_update\r\n  end\r\nend\r\n```\r\n\r\nThis works!  Test::Unit calls setup before each test and we mock Time.now to return 30 seconds later each time so that the 10-second check is fooled.  This is *way* better than sleeping ten seconds before the second test.  You'd be depressed to know how many people solve the problem that way and forever after their test suites run slowly.\r\n\r\nNow think about a test that can run longer.  The hacks around it are often horrible.  Mocking Time.now isn't beautiful, but it's not awful.\r\n\r\nNow you know the basics.  In a few days I'll have another post for you with another use of this technique, and then we'll move on to how to use it in threaded situations -- a quite common reason to need to mock Time.now.\r\n","created_at":"2012-08-08T03:45:37Z","id":23,"published":true,"title":"Rejected by GoGaRuCo: Mocking Time.now for Faster Tests!","updated_at":"2012-08-09T16:53:41Z"},{"body":"Have you guys seen <a href=\"http://bootswatch.com/\">BootSwatch</a>?  It's awesome.\r\n\r\nRelatedly, I just redesigned <a href=\"http://rebuilding-rails.com\">Rebuilding-Rails.com</a> so instead of a horrific eyesore, it now looks pretty generic.\r\n\r\nYou know that complaint that designers mention, the one that goes, \"and then your site will look just like all these other sites put together by mediocre designers\"?\r\n\r\nI really hope some day <i>that</i> is my complaint.  \"Mediocre designer\" is far more praise than my design skills deserve.\r\n\r\nGood thing I'm a <a href=\"http://static.angelbob.com/portfolio\">programmer</a>, huh?\r\n\r\nScreenshots, before:\r\n\r\n<a href=\"/images/rr_before/1_full.png\">\r\n  <img src=\"/images/rr_before/1_thumb.png\" alt=\"Rebuilding Rails front page, before\" />\r\n</a> <a href=\"/images/rr_before/2_full.png\">\r\n  <img src=\"/images/rr_before/2_thumb.png\" alt=\"Rebuilding Rails front page, before\" />\r\n</a> <a href=\"/images/rr_before/3_full.png\">\r\n  <img src=\"/images/rr_before/3_thumb.png\" alt=\"Rebuilding Rails front page, before\" />\r\n</a>\r\n\r\n<a href=\"http://rebuilding-rails.com\">Click through for 'after'</a>","created_at":"2012-08-11T15:58:32Z","id":24,"published":true,"title":"Redesign: Rebuilding-Rails.com","updated_at":"2012-08-11T16:08:53Z"},{"body":"I took <a href=\"http://unicornfree.com\">Amy Hoy</a>'s <a href=\"http://unicornfree.com/30x500/\">30x500</a> class awhile back.  A buyer of my book asked whether I thought it was worth it.  Here's what I wrote back:\r\n\r\nYes, I'm a 30x500-er, and yes, I'd recommend it.  \"3x5er?\"  Not sure.  We don't have a good collective noun :-)\r\n\r\nI'd say the course is absolutely worth it *if* you're serious.  As you've seen, it's not cheap.  If you're only mostly serious, the price is a kick in the pants.  You may actually do the work to avoid wasting multiple thousands of dollars.  I don't think I individually needed that -- nobody seems to think it's for them!  But empirically and numerically, that seems to help people.  Isn't it nice to be able to hack the sunk cost fallacy to work in your *favor*?  Relatedly, yes, I think the class will absolutely help other developers create products above a certain level of seriousness.\r\n\r\nSo here's the hard part, which is both the best and worst part of the course.  As developers, you and I both want to write code and have people buy the results.  Doing that is, like, *maybe* 30% of building an actual product, if you're lucky.  30x500 isn't about writing code.  You already know how to write code and you don't need to pay to learn.  You mention that you're already working on \"the guts of a web app\", which is a good sign, I was doing the same thing...  But don't get too attached to it.\r\n\r\n30x500 is a combination self-help and marketing course.  That's what I *actually* needed.  You will be ignoring that half-built web app and instead finding an audience (potential customers), figuring out what actual problems they have, and building something to help with that.  Which is how I wound up shipping Rebuilding Rails instead of a freemium build-a-portfolio site for developers, which I had mostly built already.  The class takes awhile.  It has to, because it has to pry your darlings from that death grip you have on them.  You'll see most of them strangled by the end of the class, which is exactly what needs to happen.\r\n\r\nYou need to refocus.  Not just your eventual marketing efforts, but your from-the-start product design and development efforts.  You have to solve a problem that somebody will pay to solve.  If your half-a-web-app is like my various half-a-web-apps, that's not what you did.  I certainly didn't survey the market first and build them because somebody was lining up with cash to solve a problem.\r\n\r\nI built them because they seemed like a good compromise between \"fun to build\", \"within my abilities\" and \"somebody might want it, maybe\", which I judged by whether it was like some startup I'd heard of.\r\n\r\nThat compromise is death.\r\n\r\nSomebody said that making money is so hard you can't do it by accident.  You have to actually focus on it.  But you can't not-focus on it for awhile and then start focusing on it.  You have try to do something that people actually want (and will pay for), right from the beginning.\r\n\r\n30x500 is a long series of calling you on your bullshit, one lesson at a time.  There's some how-to as well, but those are the parts that you could find by Googling how-to articles.  Don't take the class for the how-to articles.  If you do you'll be disappointed.  Take the class for the series of articles about being brave and focused, and here's what being brave and focused looks like during this one specific activity.\r\n\r\nIt emphasizes the process, and the process is simple, sometimes almost insultingly so.  That's because you're going to, at some level, be terrified of what she's advising.  It requires a lot of arrogance to make something from nothing and then tell people they should buy it because it's awesome.  If you can follow a simple set of directions, consistently, week after week, 30x500 will be worth it to you.\r\n\r\nDo that despite being terrified and disbelieving, failing repeatedly, getting little or no customer feedback early on, and generally having every reason to quit.  You'll get there.\r\n\r\nI'm not the most successful 3x5er.  That might be Jarrod Drysdale or Brennan Dunn, I'm not sure.  But I'm pretty sure I'm in the top handful.  I'm also very good at following a simple procedure, consistently, while terrified and disbelieving.\r\n\r\nI don't think that's a coincidence.\r\n","created_at":"2012-08-20T16:07:38Z","id":25,"published":true,"title":"30x500 - why?","updated_at":"2012-08-21T04:03:57Z"},{"body":"This idea was <a href=\"http://codefol.io/posts/23-Rejected-by-GoGaRuCo-Mocking-Time-now-for-Faster-Tests-\">rejected by GoGaRuCo (link to part one)</a> as a talk.  So you get to see it on this blog!\r\n\r\nQuick summary:  I've got a thing with a background thread.  Clearly the code could have things go wrong.  Oh Jeebus, how do I test it?\r\n\r\nYou can check out <a href=\"https://github.com/ooyala/hastur\">Hastur's Ruby client</a> as an example here -- it has exactly this problem, but is simple enough to explain easily.  So when you ask, \"instead of the example code, what should this actually look like?\", Hastur isn't a bad place to check.  Hastur sets up a background thread automatically to send back a process heartbeat.  It has some unit tests to check that, which use some of the techniques in this post.\r\n\r\nHere's the much-simplified code we'll test with in this post:\r\n\r\n``` ruby\r\n# mylib.rb\r\nclass MyLib\r\n  attr_reader :initialized\r\n\r\n  def initialize\r\n    @mutex = Mutex.new\r\n    @counter = 0\r\n    start_bg_thread\r\n  end\r\n\r\n  def start_bg_thread\r\n    @thread = Thread.new do\r\n      thread_method\r\n    end\r\n  end\r\n\r\n  def counter\r\n    @mutex.synchronize do\r\n      @counter\r\n    end\r\n  end\r\n\r\n  def counter_inc(increment = 1)\r\n    @mutex.synchronize do\r\n      @counter += increment\r\n    end\r\n  end\r\n\r\n  def thread_method\r\n    last_update = Time.now\r\n    @initialized = true\r\n    loop do\r\n      sleep 1\r\n      if Time.now - last_update >= 5\r\n        counter_inc\r\n        last_update = Time.now\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nThere are actually several techniques for mocking a background thread.  It's a hard thing because it's inherently timing-dependent and stateful, and state and timing are two of the hardest things to test.\r\n\r\nWhat are the options?\r\n\r\n### Mock the Thread Completely\r\n\r\nOne choice is to just never start a background thread.  If you have a method that starts the thread, you can mock it.  Or you can mock Thread.new just as you mocked Time.new in the last post.  Or let the thread run, but don't use it.\r\n\r\nYou'll need to mock any methods the thread would call or values it would set that affect the main thread.\r\n\r\nThere's a lot that doesn't get tested that way.  Since none of the thread's code ever executes, it could be completely broken and never do anything and you wouldn't know.  You've mocked it away completely.\r\n\r\nOn the plus side, this methods gives the most reliable tests *because* you're not using a big ball of timing and state in your unit tests.  The approach is very clean &mdash; so clean that it misses a lot of the problems you'd like to test.\r\n\r\n```\r\n# test_mylib.rb\r\nrequire \"./mylib\"\r\nrequire \"test/unit\"\r\nrequire \"mocha\"\r\n\r\nclass TestThreadsCleanly < Test::Unit::TestCase\r\n  def setup\r\n    @obj ||= MyLib.new\r\n  end\r\n\r\n  def test_thread_stuff\r\n    # Test later on when the counter is higher\r\n    @obj.expects(:counter).returns(7)\r\n\r\n    assert_equal 7, @obj.counter\r\n  end\r\n\r\nend\r\n```\r\n\r\n### Mock the Thread Operations\r\n\r\nYou can also start the thread and mock all the things it *calls*.  That tests the thread's code, but tests it in isolation from the larger system.\r\n\r\nThis is better since the thread code is guaranteed to not be 100% broken.  It's not perfect because you're still not testing the interaction of the thread with the rest of the system.  But it can be a very useful way to unit test.\r\n\r\nYou'll also notice a couple of (annoying) sleeps in the test code.  To avoid those, you basically need some way for the library background thread and the test code to wait on each other -- that's so rarely a good idea that I'm not even going to go into it.  Believe me, you can do it, and if you do then you're probably hardcoding the tests to the point where they don't really test the behavior of code that *doesn't* integrate that deeply.\r\n\r\n```\r\n# test_mylib2.rb\r\nrequire \"./mylib\"\r\nrequire \"test/unit\"\r\nrequire \"mocha\"\r\n\r\nclass TestThreadOperations < Test::Unit::TestCase\r\n  def setup\r\n    @obj ||= MyLib.new\r\n  end\r\n\r\n  def test_thread_stuff\r\n    # When we get here, we don't know if the\r\n    # thread operations have actually started.\r\n    # You can wait on an operation or even just\r\n    # sleep(0.1) and be pretty sure.\r\n    sleep 0.1 until @obj.initialized\r\n\r\n    # First, the operation to check\r\n    @obj.expects(:counter_inc)\r\n\r\n    # Then ensure update will trigger\r\n    t = Time.now + 15\r\n    Time.stubs(:now).returns(t)\r\n\r\n    # Now wait again for the sleep to end and\r\n    # the thread to execute\r\n    sleep(2)\r\n\r\n    # We never call any explicit operations\r\n    # because we only want to test the thread,\r\n    # not the rest of the system.\r\n\r\n    # When you exit, the \"expects\" on the\r\n    # operation you were waiting for will trigger.\r\n  end\r\n\r\nend\r\n```\r\n\r\n### The Full Monty\r\n\r\nYou can also let the system interact properly between thread and non-thread operations.  That gives you the largest, most integrated testing while also giving the greatest chance that your test code is getting something subtly wrong.  Writing multithreaded code integrating multiple components is hard, and your test is one more component that has to integrate with the thread.\r\n\r\nKeep in mind that, at least with Mocha, any method you \"expect\" doesn't actually get called.  So that can wreak havoc if you let it.  Try to only \"expect\" things that are only side effects, or that you can mock away completely.  It's hard, and you may have to cheat by calling original methods from test code in some cases.\r\n\r\nAlso, this should strike you as bigger, slower, more annoying and more brittle than the previous two cases, even in this simple, abstracted example.  It is.\r\n\r\nWhen Functional Programming people talk in smug tones about how you should avoid stateful programming because state is the Original Sin of programming and so on and so forth...  This is what they're talking about.  This is to be avoided where possible.  Now all you have to do is use Haskell for everything, right?\r\n\r\nHere's the example with the test code:\r\n\r\n``` ruby\r\n# test_mylib3.rb\r\nrequire \"./mylib\"\r\nrequire \"test/unit\"\r\nrequire \"mocha\"\r\n\r\nclass TestThreadOperations < Test::Unit::TestCase\r\n  def setup\r\n    @obj ||= MyLib.new\r\n  end\r\n\r\n  def test_thread_stuff\r\n    # Same synchronization problems as last test\r\n    sleep 0.1 until @obj.initialized\r\n\r\n    # Get \"pre\" counter value\r\n    c = @obj.counter\r\n\r\n    # Also want to force update, like last test\r\n    t = Time.now + 15\r\n    Time.stubs(:now).returns(t)\r\n    sleep 2\r\n\r\n    c2 = @obj.counter\r\n\r\n    # Assert that counter ticked up once\r\n    assert_equal c + 1, c2\r\n\r\n    # This is actually harder than it looks.\r\n    # What if we had a counter update right\r\n    # after getting c but before stubbing\r\n    # Time.now?  We'd get a c2 that was\r\n    # higher by 2, not 1.  This test will pass\r\n    # by itself because the timing is pretty\r\n    # reproducible.  Run it with something\r\n    # that takes a multiple of 5 seconds, and\r\n    # you'll occasionally hit that bug...\r\n  end\r\nend\r\n```\r\n\r\n### What's the Right Answer?\r\n\r\nI don't think there *is* a true right answer.  When you ask me \"unit tests or integration tests?\", I think the answer has to be \"both\".  When you ask me \"mocking, or isolated testable units?\", again I think it has to be \"both.\"  You have to test a lot of components whose design you don't control.  And in a language with good mocking like Ruby, the overhead of dependency injection is often not worth it.  Without it your code is often far more maintainable, and monkeypatching/mocking can effectively give you free dependency injection in most cases.  Use it when it's worth the maintainability hit.\r\n\r\nBut getting back to \"both\"...\r\n\r\nIntegration tests are far more expensive per bug found than unit tests.  But unit tests will never find interaction bugs between components.  Mocking Time.now and Thread.new is clearly well into \"integration test\" territory.  Don't replace unit tests with it, that's stupid.  Use unit tests to check your individual components, including the thread itself.  Then write integration tests that don't test each component all that much, but that are designed to test how each component *talks* to each other component.\r\n\r\nIt's expensive in time and effort, and often unpredictable.  But it will catch bugs that no amount of unit testing will ever catch.\r\n","created_at":"2012-09-04T03:03:47Z","id":26,"published":true,"title":"Rejected by GoGaRuCo: Mocking Time and Threads, Part 2","updated_at":"2012-09-04T03:54:25Z"},{"body":"Ever notice how most cellular phones don't want to go in my pants?\r\n\r\nUh, I mean, *your* pants.\r\n\r\nThere may be an external button for the camera, to take many, many pictures of the inside of your pockets, as my old one did.\r\n\r\nThere may be an external volume button to make your phone silent next time you use it.\r\n\r\nThere will certainly be poorly controlled buttons that kill your battery by waking your phone up many times.\r\n\r\nWithout question the phones are designed to be horribly scratched up by your keys, pocket change and other pants paraphernalia.\r\n\r\nThis is because cellular carriers *do not want you to wear pants*.\r\n\r\nDo the only thing you can do:\r\n\r\nCall your cellular carrier and tell them:  <span style=\"font-size: 250%; color:green;\">\"I am a Pants-Wearing American and you can't tell me not to wear pants!\"</span>\r\n","created_at":"2012-09-05T00:43:55Z","id":27,"published":true,"title":"The Anti-Pants Conspiracy, Cellular Edition","updated_at":"2012-09-05T00:50:03Z"},{"body":"Society pressures you constantly to wear pants.  You know it's true.\r\n\r\nYour cellular carrier pressures you to wear pants.\r\n\r\nLook at the awkward, ugly \"belt holsters\" for cellphones that they sell.  Look how easy it is to drop and break your cellphone if you try to use them.  Consider that even if you *do* use them, they need belt loops, and look terrible with dresses or too big and lopsided with shorts.\r\n\r\nYour cellular carrier demands that you wear pants.\r\n\r\nYou must do the only thing you can do:\r\n\r\nCall your cellular carrier and say: <span style=\"font-size:250%; color:green;\">I am a Pants-Choosing American and you can't tell me whether to wear pants!</span>\r\n","created_at":"2012-09-05T00:49:34Z","id":28,"published":true,"title":"The Pants Conspiracy, Cellular Edition","updated_at":"2012-09-05T00:49:34Z"},{"body":"Rails is <a href=\"http://www.engineyard.com/blog/2009/thats-not-a-memory-leak-its-bloat/\">bloated</a> and <a href=\"http://gilesbowkett.blogspot.com/2012/02/rails-went-off-rails-why-im-rebuilding.html\">hard to learn</a>.  You'd love to use a really simple framework like Sinatra.  But what if you need something from Rails that isn't there?  You can't memorize all the hundreds of helper methods in Rails.  But what are the important ones that will hurt you badly if you don't know them?\r\n\r\nWhy not build from something simpler and smaller?  <a href=\"http://nodejs.org\">Node.js</a> or <a href=\"http://sinatrarb.com\">Sinatra</a>, say?\r\n\r\nHow much useful can Rails give you that's <a href=\"http://www.quora.com/Has-Ruby-on-Rails-became-bloated\">worth all the bloat</a>?\r\n\r\nSome good stuff, actually...  But less than you think.\r\n\r\n### Security\r\n\r\nThe big answer is \"security\".  I won't go over <a href=\"http://guides.rubyonrails.org/security.html\">the entire list of security stuff you should care about for Rails</a>.  But here are some highlights that you'll need to fix if you build on <a href=\"http://rebuilding-rails.com\">a slimmer framework</a> before you put it up online:\r\n\r\n* <a href=\"http://guides.rubyonrails.org/security.html#session-fixation-countermeasures\">Session fixation and hijacking</a>\r\n* <a href=\"http://guides.rubyonrails.org/security.html#csrf-countermeasures\">Cross-Site Request Forgery</a>\r\n* <a href=\"http://guides.rubyonrails.org/security.html#countermeasures\">Mass Assignment</a>\r\n* <a href=\"http://guides.rubyonrails.org/security.html#sql-injection-countermeasures\">SQL Injection</a>\r\n* <a href=\"http://guides.rubyonrails.org/security.html#html-injection-countermeasures\">Cross-Site Scripting and HTML Injection</a>\r\n\r\nRails has fixes for all of these linked in the list.  <a href=\"http://guides.rubyonrails.org/security.html\">Check the Rails security guide</a> for more information about what this buys you.\r\n\r\nThe Rails security guide also covers a lot of problems you have to know in *any* web framework.\r\n\r\nDo you care?  You really, *really* should.\r\n\r\n### Assets\r\n\r\nRails will happily precompile your <a href=\"http://coffeescript.org\">CoffeeScript</a>, use <a href=\"https://github.com/sstephenson/sprockets\">Sprockets</a> to compress your JavaScript, add <a href=\"http://jquery.com\">jQuery</a> to your app and <a href=\"http://guides.rubyonrails.org/asset_pipeline.html\">generally get things ready for you</a>.\r\n\r\nBut perhaps more importantly, it will rename your assets (images, CSS, javascript, etc) every time they change and fetch them at a slightly different address.  This means that in development mode you get to skip a *lot* of cache bugs when you change files.\r\n\r\nRails will also do a few other things to your assets like auto-sprite-ify sets of images with CSS and serve your assets from several different asset subdomains for maximum speed.\r\n\r\nDo you care?   You probably care after you're scaling up significantly.  Rails will give you these things for free, which is nice.  Or your framework of choice will allow you to build it manually and then debug it.\r\n\r\n### Optimization\r\n\r\nRails makes it easy to do things like <a href=\"http://guides.rubyonrails.org/caching_with_rails.html\">page, action and fragment caching<a/> backed by files, memory, MemCacheD or in several other ways.\r\n\r\nIt also has good support for things like <a href=\"http://www.tbray.org/ongoing/When/200x/2008/08/14/Rails-ETags\">ETags</a> and <a href=\"http://stackoverflow.com/questions/11145447/rails-3-http-header-if-modified-since-using-curl\">If-Modified-Since</a> via helpers like <a href=\"http://stackoverflow.com/questions/3744090/rails-fresh-when-stale-usage\">fresh-when and stale?</a>.\r\n\r\nThat's probably the kind of thing you're happy to ignore when you pick a slimmer framework.\r\n\r\n### Libraries\r\n\r\nRails has a head start over everybody else in libraries.  Sinatra can <a href=\"http://codefol.io/posts/14--What-is-Rack-A-Primer\">run Rack middleware</a> and Node.js has an extensive library accessible through NPM, but Rails has <a href=\"http://ruby-toolbox.com\">an unparalleled selection of libraries that support it</a>.\r\n\r\nBasically *everything* Ruby supports Rails.\r\n\r\nSome of the best stuff is Rack, and so it supports Rails *and* Sinatra.  But often even if you're using Rack middleware, there's an additional wrapper with convenience functions for Rails, so Rails has the advantage again.  For instance, <a href=\"https://github.com/hassox/warden\">Warden</a> is a nice Rack-based authentication system, but <a href=\"https://github.com/plataformatec/devise\">Devise</a> is the same thing nicely packaged for Rails.\r\n\r\n### Now Go Build in Whatever You Like\r\n\r\nI'm not worried whether you use Rails, Sinatra, Node.js, <http://padrinorb.com\">Padrino</a>, <a href=\"http://rebuilding-rails.com\">Rulers</a> or something else completely.\r\n\r\nBut remember that a web app with bad security can compromise everybody *else's* security too.  When you pick a smaller, simpler framework, know what you're missing and how to fix it.\r\n\r\nPlay safe!","created_at":"2012-09-05T02:48:41Z","id":29,"published":true,"title":"Why Rails and not Sinatra or Node.js?","updated_at":"2012-09-05T15:38:21Z"},{"body":"This is a repost of email I sent to my <a href=\"http://codefol.io/posts/25-3-x5-why-\">30x500 classmates</a>.\r\n\r\nIn July I put a lot of time and effort into marketing, and <a href=\"http://codefol.io/posts/22-My-First-Thousand-in-Product-Revenue-Story-and-Numbers\">it paid off pretty well</a>.\r\n\r\nThere are clearly several divisions within marketing (and separate from writing my book).  I'm trying to figure out how to balance them.\r\n\r\nHere's how I'm currently thinking about that:\r\n\r\n1. \"Feed the funnel\" marketing.  This is education and posts of all descriptions, as well as getting mentions of me into sites, newsletters, etc.  Basically, anything that drives people to my blog or <a href=\"\r\nhttp://rebuilding-rails.com\">Rebuilding Rails</a>.  This is short-term in mindset, but gets me the most (direct) sales.  The falloff in effectiveness over time is pretty vicious, though -- this is the most like having a job, and is the easiest to calculate an \"hourly wage\" for.  <a href=\"http://unicornfree.com\">Amy</a> retweeted <a href=\"https://twitter.com/amyhoy/status/225962034171346946\">Thomas talking about \"gold farming\"</a>, and this really does feel like that.\r\n\r\n2. \"Legibility\" marketing.  This is work that gets me no customers but lets me see things about them.  Google Analytics, tracking codes, checking logfiles, split testing, propagating referrer tags in JavaScript...  No money here at all, directly, but it makes every other category of marketing more effective.  This is how I understand my audience and my watering holes.\r\n\r\n3. \"Optimize the funnel\" marketing.  That's web site design, copy rewriting, adding social proof to my sales page and so on.  The goal here is to improve the conversion at some step, or drive people to a later step instead of an earlier one (e.g. add mailing list signup right to the blog instead of making them click through).  This can compound nicely but it's only a multiplier, it doesn't add revenue by itself.\r\n\r\n4. \"Next bite at the apple\" marketing.  This can be emailing my list(s) with a sale or e-bomb.  Eventually it could be emailing my buyer list with upgrades, new products or discount-for-your-friends offers.  I don't have a good feel for the mechanics and payoff, but clearly it will work better as my lists grow.  Early results look promising.\r\n\r\n5. \"Engagement\" marketing.  I don't have a good feel for this yet.  I'm building a lot of content that *should* stay valuable for a really long time -- for instance, by <a href=\"http://codefol.io/posts/14--What-is-Rack-A-Primer\">making documentation for Rack</a>.  But I'm currently only getting a short-term boost out of it, which feels like a waste.  I *think* I should be working harder to drive people from one page in my blog to another, to build page rank, to get inbound links and otherwise to generate an honest-to-God passive trickle of constant traffic that I don't have to write for or pay for.  This is the <a href=\"http://kalzumeus.com\">Patrick McKenzie</a> holy grail.  And I don't think I'm doing this effectively yet.\r\n\r\nI'm focusing hard on type 1 marketing.  It's the only additive (rather than multiplicative) bit here, so clearly I have to start with it.  I feel like I'm doing both too much *and* too little type 2 marketing - I don't have a huge number of customers or a huge list so it feels wasteful, and yet I'm just guessing where my most valuable readers (the ones who actually buy!) come from.\r\n\r\nI'm doing a little bit of type 3 marketing, but it feels like it's not very effective yet.  Optimizing will get way easier when I can measure.  But I *am* going to <a href=\"http://codefol.io/posts/24-Redesign-Rebuilding-Rails-com\">apply a real template to my sales site</a> since the current design is getting flat-out embarrassing ;-)\r\n\r\nAnd 4 and 5 are mostly future-tense.  When I get major stuff done I'll send email to my list, of course, and I'm already planning on three more (loudly telegraphed) price hikes over the next few months.  But 4 and 5 feel like it's too early for me to being working on, overall.\r\n\r\nHow do people divide work in marketing?  Do you folks see anything major I'm missing, or have areas where you strongly disagree with my division or characterization?","created_at":"2012-09-05T05:18:04Z","id":30,"published":true,"title":"Five Kinds of Marketing for Tiny Web Businesses","updated_at":"2012-09-05T05:20:42Z"},{"body":"A reader asked me for quick recommendations on writing clean code.  Here's what I wrote back:\r\n\r\n<hr/>\r\n\r\nClean code can be a number of things.  For instance, a classmate of mine named Jim Gay likes a pattern called DCI for separation of concerns, and <a href=\"http://clean-ruby.com\">wrote a book about it (http://clean-ruby.com/)</a>.\r\n\r\nBut you may just mean \"easy to maintain\".  For that, there are a number of Rails best practices that can help in Rails, if that's what you're using at the time.  You can even install a gem to check some of them automatically (https://github.com/railsbp/rails_best_practices).\r\n\r\nFinding a style guide can help, though it will only get you so far.  It's easy to see how to improve a little, and the rules are well explained.  Here's the one GitHub uses internally:  https://github.com/styleguide/ruby\r\n\r\nTo a large extent, just make sure you maintain your own code.  Nothing else keeps you honest quite as well as using and maintaining your own stuff!\r\n","created_at":"2012-09-10T15:48:18Z","id":31,"published":true,"title":"Clean Ruby Code","updated_at":"2012-09-10T15:48:18Z"},{"body":"I hate all the \u201crequires\u201d at the front of Ruby files.  I *know* what methods I'm using, but I have to write it in both places.  Not exactly <a href=\"http://en.wikipedia.org/wiki/Don't_repeat_yourself\">DRY</a>.  Rails skips them &mdash; you just use the classes you want.  How can I automatically load my files like Rails does?  Read on.\r\n\r\nRuby has method_missing.  When you call a method that doesn\u2019t exist on an object, Ruby tries calling \u201cmethod_missing\u201d instead.  That lets you make \u201cinvisible\u201d methods with unusual names.\r\n\r\nRuby also has const_missing, which does the same thing for constants that don\u2019t exist.  Class names in Ruby are just constants.  Hmm...\r\n\r\n## const_missing and You\r\n\r\nFirst, let\u2019s see how const_missing works.\r\nPut this into a file called test_const_missing.rb and run it:\r\n\r\n``` ruby\r\n# test_const_missing.rb\r\nclass Object\r\n  def self.const_missing(c)\r\n    STDERR.puts \"Missing constant: #{c.inspect}!\"\r\n  end\r\nend\r\n\r\nBobo\r\n```\r\n\r\nWhen you run it, you should see \u201cMissing constant: :Bobo\u201d.  So we get to the constant, but it\u2019s not loaded.  That seems promising.  But we still get an error.\r\n\r\nCreate a file in the same directory called bobo.rb that looks like this:\r\n\r\n``` ruby\r\n# bobo.rb\r\nclass Bobo\r\n  def print_bobo\r\n    puts \"Bobo!\"\r\n  end\r\nend\r\n```\r\n\r\nPretty simple.  Let\u2019s change the first file:\r\n\r\n``` ruby\r\n# test_const_missing.rb\r\nclass Object\r\n  def self.const_missing(c)\r\n    require \"./bobo\"\r\n    Bobo\r\n  end\r\nend\r\n\r\nBobo.new.print_bobo\r\n```\r\n\r\nNow try running it again.  It prints Bobo! as you\u2019d hope.  So we just need to return something from const_missing, and that\u2019s what the unloaded constant acts like.\r\n\r\nHey, that\u2019s exactly what Rails does!\r\n\r\n## CamelCase and snake_case\r\n\r\nThere\u2019s one hitch, though.  When you use a constant like BadAppleController, it\u2019s not loading a file named BadAppleController.rb.  It\u2019s loading bad_apple_controller.rb.  So we\u2019ll need to convert from one to the other.\r\n\r\n<a href=\"http://en.wikipedia.org/wiki/CamelCase\">CamelCase</a> is the name for alternating capital and lowercase letters to show where words begin and end.  The other way is called <a href=\"http://en.wikipedia.org/wiki/Snake_case\">snake_case</a> when you use lowercase_and_underscores.\r\n\r\nSince we know we need to do that conversion, let\u2019s add a method to do it.\r\n\r\n``` ruby\r\n# to_underscore.rb\r\ndef to_underscore(string)\r\n  string.gsub(/::/, '/').\r\n  gsub(/([A-Z]+)([A-Z][a-z])/,'\\1_\\2').\r\n  gsub(/([a-z\\d])([A-Z])/,'\\1_\\2').\r\n  tr(\"-\", \"_\").\r\n  downcase\r\nend\r\n```\r\n\r\nI stole and lightly modified this from ActiveSupport in Rails.  I\u2019m not going to explain it here (<a href=\"http://rebuilding-rails.com\">I do in my book</a>).\r\n\r\n## Putting It Together\r\n\r\nYou have all the pieces.  You can catch a class not existing.  You can convert a class name to a filename.  You already know the rest -- it's basic.  So let\u2019s add automagic constant loading.\r\n\r\nOpen up test_const_missing.rb:\r\n\r\n``` ruby\r\n# Okay, one more require...\r\nrequire \"to_underscore\"\r\n\r\n# test_const_missing.rb\r\nclass Object\r\n  def self.const_missing(c)\r\n    require to_underscore(c.to_s)\r\n    Object.const_get(c)\r\n  end\r\nend\r\n\r\nBobo.new.print_bobo\r\n```\r\n\r\nYou've just written code to see that the class is used and load it up automatically.  Now you just need to figure out where from...\r\n\r\nBut I'll leave that as an <a href=\"http://catb.org/jargon/html/E/exercise--left-as-an.html\">exercise for the reader</a>.\r\n\r\n## And That's That...?\r\n\r\nDid you enjoy this?  It's pretty much straight from the book I'm writing.  If you give me your email address below, you'll get the chapters leading up to it about building a Ruby web framework...  And now you know how to make that framework load constants automatically!","created_at":"2012-09-15T22:31:19Z","id":32,"published":true,"title":"No More Requires","updated_at":"2012-09-20T11:11:11Z"},{"body":"Evan Light recently used the wonderful phrase <a href=\"http://evan.tiggerpalace.com/articles/2012/11/21/use-rails-until-it-hurts/\">\u201dUse Rails Until It Hurts\u201d</a>.  He meant that Rails has built-in mechanisms for organizing your code and objects, and they usually result in simpler, cleaner code that mixing Rails with non-Rails.\r\n\r\nI say your <i>startup</i> should use Rails until it hurts.  And it hurts most to use it for APIs.  Let me tell you what I mean.\r\n\r\n## Rails and Less Rails\r\n\r\nI work at <a href=\"http://ooyala.com\">Ooyala</a>, an awesome mid-sized startup.  Like many startups, we <a href=\"http://engineering.twitter.com/2011/04/twitter-search-is-now-3x-faster_1656.html\">started on Rails and we\u2019re using less and less Rails as we go along</a>.  We\u2019re switching mostly to Sinatra and other Ruby frameworks, for the record.\r\n\r\nRails is designed for defaults.  Rails is <i>amazing</i> for your tiny startup that\u2019s just testing out an idea.  And Rails\u2019 <a href=\"http://guides.rubyonrails.org/security.html\">wonderful ways to protect you from yourself</a> will take you a surprisingly long way without making you think too hard about security.  That\u2019s great... up to a point.\r\n\r\nBut we all know that <a href=\"34-Rails-Is-the-Wrong-Tool-for-Your-REST-API\">vanilla Rails isn\u2019t so good for APIs</a>.  A big company\u2019s <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\">internal code is pretty much a giant ball of APIs</a>.  And internal code is <a href=\"http://research.google.com/pubs/papers.html\">95% of what we do</a>.  Even <a href=\"http://twitter.com\">companies who clearly love Rails</a> stop using it for back-end APIs pretty quickly.  And that\u2019s even better.\r\n\r\n## Wait, Switch?  To What?\r\n\r\nWhy?  What\u2019s better for APIs?  Well, <a href=\"http://www.slideshare.net/oisin/simple-rest-services-with-sinatra\">Sinatra</a>, pretty obviously.  <a href=\"https://github.com/spastorino/rails-api\">Rails-API</a>, when it\u2019s finally stable.  And in fact, there\u2019s a burgeoning cottage industry of API frameworks just in Ruby, including <a href=\"https://github.com/intridea/grape\">Grape</a> and <a href=\"https://github.com/filtersquad/rocket_pants\">RocketPants</a>.\r\n\r\nFor that matter, you can build on plain vanilla <a href=\"http://rack.github.com/\">Rack</a> -- if you do, consider <a href=\"http://rebuilding-rails.com\">buying my book</a> since it\u2019s the best documentation on how to build a low-level Rack framework.\r\n\r\n## But Then, Is Rails Doomed?\r\n\r\nI keep saying \u201cRails is awesome\u201d in kind of back-handed ways.  So let me say, for the record:  I think Rails is great, I think it\u2019s still growing, and I think it\u2019s not going away.  I think that <a href=\"http://ruby.dzone.com/articles/rails-vs-grails\">even more frameworks are going to steal its best ideas</a>.  I think it\u2019s going to take a long time to be replaced, and whatever finally kills it doesn\u2019t exist yet.\r\n\r\nI think it\u2019s going to become clearer that Rails is a niche framework for a very specific set of needs.  And I think it\u2019s <i>by far the best thing out there</i> for that niche and those needs.  And I think we\u2019re going to see a lot more <a href=\"http://engineering.twitter.com/2011/04/twitter-search-is-now-3x-faster_1656.html\">\u201cgrowing out of Rails\u201d</a> stories and a lot more \u201cgrowing out of Rails\u201d frameworks as we see \u201cRails\u201d and \u201cpost-Rails\u201d as two different viable niches.","created_at":"2012-12-31T05:35:52Z","id":33,"published":false,"title":"Use Rails Until It Hurts - But Not for APIs","updated_at":"2012-12-31T14:29:09Z"},{"body":"Rails is a heavyweight framework and it does <a href=\"http://guides.rubyonrails.org/security.html\">a lot of awesome stuff by default</a> that only a few other frameworks provide.  But most of the benefit goes <i>right</i> out the window when you\u2019re using it to write a simple REST API.  Lemme \u2018splain.\r\n\r\n## What\u2019s In a REST API?\r\n\r\nWhen I say \u201cyour REST API\u201d, I\u2019m specifically talking about a little application server that serves requests over HTTP, preferably using <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\">REST principles</a>, but not necessarily.  Generally a REST API server is backed by a database or other form of data storage.  It might provide calculation of some kind, either with a data store or not.  You can think of the Twitter API or the GitHub API, for instance, or simpler things like <a href=\"http://graphite.readthedocs.org/en/1.0/url-api.html\">querying data points from Graphite</a>.\r\n\r\nWhat I am <i>not</i> talking about is anything serving a user-visible HTML-CSS-and-JS web site, meant to be consumed by a user, interactively, in a browser.  Let\u2019s call that a \u201cweb app server\u201d instead of a \u201cREST API server\u201d.\r\n\r\nRails should be used for web apps in most cases, and REST APIs only rarely.\r\n\r\n## Why Not?\r\n\r\nRails is <i>heavy</i>.  Installing Rails on a fresh system requires installing the following gems, at minimum:\r\n\r\n~~~\r\nSuccessfully installed i18n-0.6.1\r\nSuccessfully installed multi_json-1.5.0\r\nSuccessfully installed activesupport-3.2.9\r\nSuccessfully installed builder-3.0.4\r\nSuccessfully installed activemodel-3.2.9\r\nSuccessfully installed rack-1.4.1\r\nSuccessfully installed rack-cache-1.2\r\nSuccessfully installed rack-test-0.6.2\r\nSuccessfully installed journey-1.0.4\r\nSuccessfully installed hike-1.2.1\r\nSuccessfully installed tilt-1.3.3\r\nSuccessfully installed sprockets-2.2.2\r\nSuccessfully installed erubis-2.7.0\r\nSuccessfully installed actionpack-3.2.9\r\nSuccessfully installed arel-3.0.2\r\nSuccessfully installed tzinfo-0.3.35\r\nSuccessfully installed activerecord-3.2.9\r\nSuccessfully installed activeresource-3.2.9\r\nSuccessfully installed mime-types-1.19\r\nSuccessfully installed polyglot-0.3.3\r\nSuccessfully installed treetop-1.4.12\r\nSuccessfully installed mail-2.4.4\r\nSuccessfully installed actionmailer-3.2.9\r\nSuccessfully installed rack-ssl-1.3.2\r\nSuccessfully installed thor-0.16.0\r\nSuccessfully installed json-1.7.6\r\nSuccessfully installed rdoc-3.12\r\nSuccessfully installed railties-3.2.9\r\nSuccessfully installed rails-3.2.9\r\n29 gems installed\r\n~~~\r\n\r\n(Plus Bundler and Rake, not shown)\r\n\r\nAnd it\u2019s not just the 31 gems.  A fresh clean Rails app (\u201crails new myapp\u201d) has 37 directories, takes 164kb, has 18 .rb files, hard-codes how to do things for three different app environments and has a frightening amount of configuration.\r\n\r\nIt\u2019s hard to specifically measure how many API entry points Rails has (do all those automatic ActiveRecord accessors count?  Does the controller/view interface count?), but at least several hundred methods.\r\n\r\nRails is wonderful, but it\u2019s <i>heavy</i>.  It requires a lot of code, a lot of structure in your application, and a lot of mental overhead to keep track of.  How long did it take you to learn Rails?  How much of it do you know?  And <i>how</i> big is \u201cThe Rails 3 Way\u201d?\r\n\r\n<img src=\"http://blog.obiefernandez.com/.a/6a00e54fdca91188330147e1cb9591970b-pi\"> </img>\r\n\r\n## The Alternatives\r\n\r\nHere\u2019s another way to judge whether Rails is a high-overhead choice for a REST API.  Compare it to <a href=\"http://sinatrarb.com\">Sinatra</a>, where a small API app is one file, and often under 30 lines.  Or <a href=\"http://www.padrinorb.com/\">Padrino</a>, which includes the same things but also has database migrations, and it\u2019s still tiny.  Or stripped-down specific API choices like <a href=\"https://github.com/intridea/grape\">Grape</a>.  Even <a href=\"https://github.com/filtersquad/rocket_pants\">RocketPants</a> -- it\u2019s also built on the ActiveFoo Rails-y libraries...  But it doesn\u2019t use Rails because putting together a full Rails app is simply too heavyweight.\r\n\r\nThe <a href=\"https://github.com/rails-api/rails-api\">Rails-API</a> project exists (and is run by Rails core members!) specifically because vanilla Rails is seen <i>by Rails core members</i> as not being a reasonable choice for APIs.  Think about that.\r\n\r\n## But It Doesn\u2019t Get In My Way!\r\n\r\nThe amount of overhead we\u2019re talking about looks small if you\u2019re Twitter-sized.  So why does <a href=\"http://engineering.twitter.com/2011/04/twitter-search-is-now-3x-faster_1656.html\">Twitter use Java instead?</a>\r\n\r\nBecause Rails overhead doesn\u2019t just stop after \u201crails new\u201d finishes running.\r\n\r\n<a href=\"http://rubyrogues.com/object-oriented-programming-in-rails-with-jim-weirich/\">Trying to do even plain-vanilla object-oriented programming in Rails</a> is suddenly a complicated topic with a <a href=\"http://evan.tiggerpalace.com/articles/2012/11/21/use-rails-until-it-hurts/\">lot of people weighing in</a>, sometimes <a href=\"http://objectsonrails.com/\">at book length</a>.  You have to educate every new programmer on your project in that several-hundred-entry-point Rails API and how you mix it with OO.\r\n\r\nFundamentally, a dedicated API framework like Grape or Sinatra is just <i>lower overhead</i> to get new people up to speed.\r\n\r\nOr, eventually, a company gets big enough to care a lot about per-machine performance and switches to a faster language, as Twitter did with Java.  Let\u2019s assume your API server isn\u2019t as big as Twitter\u2019s yet.\r\n\r\n## Why You Knocking My Homie Rails?\r\n\r\n<a href=\"http://rebuilding-rails.com\">I love Rails, really and truly</a>.  I wrote a whole book singing its praises.  No kidding.  I believe that a small team putting together a user-facing web site should use Rails because no other framework comes <i>remotely close</i>.  Rails is versatile, powerful, flexible and lets you change direction on a dime.\r\n\r\nAnd for that team's API server, when they have a separate one, that team should use Sinatra.  Or Grape.  Or even <a href=\"http://rack.github.com\">just plain Rack</a>.\r\n\r\nAlso, if they build their framework in Rack directly, they should <a href=\"http://rebuilding-rails.com\">buy my book</a> because the basic Rack docs aren\u2019t great -- it\u2019s better to walk through building a full framework if you want to understand it.\r\n","created_at":"2012-12-31T14:25:02Z","id":34,"published":false,"title":"Rails Is the Wrong Tool for Your REST API","updated_at":"2012-12-31T14:25:02Z"},{"body":"Are you getting this error from Bundler?\r\n\r\n(Short version: if using rvm, do \"rvm pkg install openssl; rvm reinstall all --force --with-openssl-dir=$rvm_path/usr\")\r\n\r\nYou could edit the live copy of lib/bundler/fetcher.rb to print out the exception -- and when you do, you might see it's a \"bad ecpoint\" problem in OpenSSL.\r\n\r\nYou won't have much luck Googling it, because it only happens when internal OpenSSL code fails in an obscure way, in assembly, only on certain versions of GCC on the Mac.\r\n\r\nIf that happens, switch to a less-bad version of OpenSSL.  You may (or may not) have luck installing the Homebrew version and configuring Ruby to use it.\r\n\r\nBut I use RVM, so I'll suggest \"rvm pkg install openssl\", then \"rvm reinstall all --force --with-openssl-dir=$rvm_path/usr\".\r\n\r\nThat will pull down 1.0.1c, an RVM-approved version of OpenSSL.  The second command rebuilds all your rubies so you'll actually use it.","created_at":"2013-03-07T18:32:31Z","id":35,"published":true,"title":"Could Not Fetch Specs From https://rubygems.org/","updated_at":"2013-03-07T18:32:31Z"},{"body":"<a href=\"http://sebastianmarshall.com\">Sebastian Marshall</a> interviewed me recently.  I think it came out great!\r\n\r\n<a href=\"http://sebastianmarshall.com/building-ruby-castles-in-the-clouds-by-noah-gibbs\">Building Ruby Castles in the Clouds</a> is the name of the interview.\r\n\r\nWe're also running a <a href=\"http://givegetwin.com\">GiveGetWin deal</a> with copies of my book for $15, with proceeds going to charity.  Been looking for a deal on <a href=\"http://rebuilding-rails.com\">Rebuilding Rails</a>?  Now is the time.\r\n\r\n","created_at":"2013-03-14T19:56:23Z","id":36,"published":true,"title":"Building Ruby Castles in the Clouds","updated_at":"2013-03-14T19:56:23Z"},{"body":"I recently wrote a <a href=\"http://engineering.ooyala.com/blog/how-create-xkcd-style-charts-using-javascript-and-d3\">post on the Ooyala engineering blog</a> about how to create an XKCD-style <a href=\"http://code.shutterstock.com/rickshaw/\">Rickshaw</a> renderer with the wobbly lines.\r\n\r\nI think it's a pretty cool trick.\r\n\r\n<img src=\"http://engineering.ooyala.com/sites/engineering.ooyala.com/files/pictures/Screen%20Shot%202012-11-09%20at%203.34.54%20PM.png\"> </img>\r\n\r\n<img src=\"https://lh5.googleusercontent.com/9TzpZu7FE-UESdImwElj2Yj22Mn21F5mMzWdCL2_Z9O10iGMcBFmDco3PFrucTH0Tbr1MEinB7lMkDpmm40gqeB-LIYJggtdMaW1OeMpeZAeqtRdVw028ibs\"> </img>\r\n","created_at":"2013-03-24T12:45:30Z","id":37,"published":true,"title":"How to Create XKCD-Style Charts Using Rickshaw","updated_at":"2013-03-24T12:45:30Z"},{"body":"On a local meetup list, somebody asked about cheap ways to learn Ruby on Rails stuff at a university's level of quality.\r\n\r\nMy response:\r\n\r\nYou'll see a lot of private (i.e. non-university, often offered by individuals) training.  \"University-level\" is always arguable -- what university do you mean?  And do you mean equal per-hour or equal to a full elite four-year program?\r\n\r\nMarc-Andre Cournoyer's \"Owning Rails\" course costs around $500 when it's offered, and I'd consider it hour-for-hour the equivalent of a university course.\r\n\r\nMy own <a href=\"http://rebuilding-rails.com\">Rebuilding Rails</a> book, while it's not a class, can be had for $40 (eventually $50), and I've literally taught Ruby on Rails at Carnegie Mellon's Silicon Valley campus, so presumably my work is also \"university-level\".  You can also get the early bits of that for free in a couple of ways -- you can download the first few chapters of my book in return for your email address, or you can <a href=\"http://www.youtube.com/watch?v=evDJMLb1d28&feature=youtu.be\">watch my Ruby Hangout presentation</a>, also very similar to the early content there, for free.\r\n\r\nMichael Hartl's amazing Rails tutorials are free if consumed in HTML.  They're beginner-level and very, very good.  CMU uses them, too, so I'm going to refer to them as \"university-level\" as well.\r\n\r\n<a href=\"http://confreaks.com\">ConFreaks</a> records every talk at every major Ruby conference and makes them all available for free.  The best of those are easily university-level content.  The worst aren't terrible and cost you only an hour of your time.\r\n\r\nRailsCasts and PeepCode aren't free, but they're cheap.\r\n\r\nAgain, you can get a *lot* of excellent content for free or cheap these days in return for the time spent to go find it.\r\n\r\nYou can pay to eliminate the need for time and initiative on your part to bootstrap you into a very lucrative career.  That is, without reasonable question, worth money.  Or you can do the same thing for yourself, which will take longer -- but I promise you, the content is out there.\r\n","created_at":"2013-03-24T23:33:09Z","id":38,"published":true,"title":"Free and Cheap Rails Training","updated_at":"2013-03-24T23:33:09Z"},{"body":"Have you <a href=\"http://www.slate.com/articles/life/low_concept/2012/06/what_kind_of_muppet_are_you_chaos_or_order_.html\">read the Slate magazine article about whether you're an Order Muppet or a Chaos Muppet</a>?\r\n\r\nDid you know that programmers and programming languages have their own Muppet Chaos Theory?\r\n\r\nLike in all of life, you can incline to order or chaos.  Specifically, consider the <a href=\"http://www.youtube.com/watch?v=4p2EjTbBYoQ\">Java</a> tenets that other people shouldn't ever be able to screw you up, all development must be done in an IDE and you need a four-or-more-level directory hierarchy before you're allowed to write \"Hello, World.\"  Can you think of anything more <a href=\"http://www.youtube.com/watch?v=skkM2zPFPy0\">Sam the Eagle</a>?\r\n\r\nWhereas in Ruby you can change the definition of any operation on any object anywhere, as late in the process as you want.  Feel like changing the definition of \"plus\" fifteen minutes after your server starts?  Knock yourself out.  It is, let us say, a somewhat more <a href=\"http://www.youtube.com/watch?v=sY_Yf4zz-yo\">Swedish Chef</a> approach.\r\n\r\nIn many cases, that explains a lot of culture clash.  If you read the Ruby spec and a fair bit of Python docs, you could be forgiven for not seeing a nickel's worth of difference in the semantics (not syntax) between them.  But Python says \"there should be one\u2014and preferably only one\u2014obvious way to do it\".  Can you say \"Order Muppet\"?  It's a clash not based on language semantics, but on Muppet Type.\r\n\r\nDoes that mean if you write in Ruby you're a Chaos Muppet?  Not necessarily, but it's a good indicator.\r\n\r\nOr that if you write in Java that you're an Order Muppet?  I'm afraid so.  You'll need to get used to your place next to Sam the Eagle, Bunsen Honeydew and <a href=\"http://www.youtube.com/watch?v=kk1Y4xo4XJ4\">Bert</a>.\r\n\r\nIt's not so bad.  Just make sure to find the right Chaos Muppet as a partner and maybe there will be <a href=\"http://www.youtube.com/watch?v=YpozspIMH9E\">cookies for everyone</a> anyway!\r\n","created_at":"2013-03-31T04:17:56Z","id":39,"published":true,"title":"Order Muppet Programmers, Chaos Muppet Programmers","updated_at":"2013-03-31T04:19:58Z"},{"body":"A fellow asked me how he could store information per-user in Rack.  This was my (brief) response:\r\n\r\n<hr />\r\n\r\nGenerally with the cookies object.  Specifically, Rack has a \"session\", which encodes a session identity into the cookies object, usually with some or all of your data.\r\n\r\nYou can also map from the session ID to data on the server side, with what Rails calls a \"session store\".  Rack comes with a few session stores (cookies, MemCache, pool) and Rails comes with more.  Here are some useful links:\r\n\r\n* <a href=\"http://stackoverflow.com/questions/3295083/how-do-i-set-a-cookie-with-a-ruby-rack-middleware-component\">How Do I Set a Cookie with a Ruby Rack Middleware Component?</a>\r\n\r\n* <a href=\"http://stackoverflow.com/questions/10451392/how-do-i-set-get-session-vars-in-a-rack-app\">How Do I Get Session Variables In Rack?</a>\r\n\r\n* <a href=\"https://github.com/rack/rack/tree/master/lib/rack/session\">GitHub: Rack Session Types</a>\r\n\r\n* <a href=\"http://guides.rubyonrails.org/action_controller_overview.html#session\">ActionController: Sessions</a>\r\n","created_at":"2013-04-01T12:53:39Z","id":40,"published":true,"title":"Rack and Session Store","updated_at":"2013-04-01T12:55:04Z"},{"body":"There are a lot of skills that you just have to learn by doing.  I call them \"bodybuilder skills.\"  You can't get around the practice by being smart, even if they seem to be skills of mind.\r\n\r\nLike weightlifting, everybody starts at zero and has to work to get better than that.\r\n\r\nWhen people ask clever questions about weightlifting skills, the correct answer is always some variant on <a href=\"http://www.dummies.com/how-to/content/weight-training-how-many-reps-and-sets-to-do.html\">\"do your reps\"</a>\r\n\r\nFor instance, when a good artist is asked by a novice about what kind of pen to use, the best ones answer with some variant of:  \"any pen.  But practice, practice, practice, all the time.\"  Do your reps.\r\n\r\nWeightlifting skills are everywhere, though.\r\n\r\nOr to put it another way: <a href=\"http://japanese.stackexchange.com/questions/9668/before-enlightenment-chop-wood-carry-water-after-enlightenment-chop-wood-carr\">\"Before enlightenment, do your reps.  After enlightenment, do your reps.\"</a>.\r\n","created_at":"2013-06-22T20:40:10Z","id":41,"published":true,"title":"Bodybuilder Bodhisattva","updated_at":"2013-06-22T20:40:33Z"},{"body":"Or at least, when I die I hope it's something they see a few months or years in advance.  The doctors should give me, say, six months to live.\r\n\r\nFor that six months, I will walk around with ten-foot-high letters of fire behind my eyeballs that say,\r\n\r\n\"I could spend this five minutes talking to you.  Or I could spend five precious, irreplaceable minutes on the porch swing, sitting next to my wife and daughters.  Now - are you <i>sure</i> this is important?\"\r\n","created_at":"2013-06-22T20:44:55Z","id":42,"published":true,"title":"I Hope I Die of Cancer","updated_at":"2013-06-22T20:44:55Z"},{"body":"My wife and I both started out with a searing, bone-deep distrust of our own instincts.  We get along well that way.\r\n\r\nIt takes us awhile to get to \"average\" at a lot of things other people are good at.  Some things require you to trust yourself...  At least, the way most people learn them.\r\n\r\nBut when we eventually hit average, we get better much, much faster than other people do.  We had to work it all out from first principles.","created_at":"2013-06-22T20:47:37Z","id":43,"published":true,"title":"In Praise of Deep Distrust","updated_at":"2013-06-22T20:47:37Z"},{"body":"I went to <a href=\"http://cmu.edu\">a great college</a>, and so I was far from the smartest guy there.  In particular, there were three of us in my freshman class of computer programmers that were smart and hung out constantly.\r\n\r\nTom could come up with a way to do anything, programming-wise.  A lot of what he did was silly, but he still had to explain a lot of it two or three times before I had a clue what he was doing.\r\n\r\nAnton was into hardware and robots, and as kind of a secondary side thing he also wrote mind-blowing programs to make lasers dance to music or recognize sounds with a microphone.\r\n\r\nI was convinced I was the dumbest of the three, but I wasn't going to let that stop me from hanging out, you know?  I learned a lot while they put up with me.\r\n\r\nOf course, both <a href=\"http://socialhacker.com/\">other</a> <a href=\"http://www.monkeyspeak.com/\">guys</a> felt the same way.  I'm told I was impressive when I was in college too.\r\n\r\nMutual hero-worship societies are the best.  If you've never been in one, go do it.  Yeah, you'll spend all your time feeling like you suck.  But you'll also get better fast...  And you <i>all</i> will.  Nobody is really, truly not learning anything.\r\n","created_at":"2013-06-22T20:57:18Z","id":44,"published":true,"title":"Mutual Hero-Worship Societies","updated_at":"2013-06-22T20:57:18Z"},{"body":"I often think of stuff in my life as like a game of Warcraft (or Starcraft, or...).  That may be all you need to know about me ;-)\r\n\r\nIt looks like those games have two resources to balance -- sometimes gold and lumber, sometimes minerals and gas.  But actually they have <i>lots</i> of resources to balance and it's <a href=\"http://www.shamusyoung.com/twentysidedtale/?p=20025\">a complicated problem</a>.\r\n\r\nReal life is far more complicated.  But just like in Starcraft, there is usually a resource that really limits what you do.\r\n\r\nMaybe you're broke and everything suffers for lack of cash.\r\n\r\nMaybe money is fine but time is brutally tight.\r\n\r\nOne or two things are usually what stymie you.\r\n\r\nWhen that happens, you'll often go to somebody else about that.  Money problems?  You could read your <a href=\"http://www.iwillteachyoutoberich.com/\">Ramit Sethi</a>.  Time problems?  <a href=\"http://www.fourhourworkweek.com/\">Tim Ferriss</a>, natch.\r\n\r\nJust remember: these are guys who specialize in that one thing.  They specialize because it was a big deal for them -- it limited them a lot, once upon a time.\r\n\r\nSo when they tell you, \"you can get four times the results you had!\" or \"this will free up hours a day!\", you're hearing from the guys <i>who were most limited by money or time</i>.\r\n\r\nThe guys who had the most trouble with that one resource:  lumber or gold or pylons or your favorite game equivalent.\r\n\r\n<i>Do</i> take their advice.  Nobody tells you how to get more Vespene Gas than the guy who needs it most.\r\n\r\nBut don't take their promises of results too seriously.  You may need your Vespene Gas pretty badly, but that doesn't mean that what was really missing in your life was battlecruisers...\r\n\r\nOr something?  That one kinda got away from me.","created_at":"2013-06-22T21:18:11Z","id":45,"published":true,"title":"You Need Your Vespene","updated_at":"2013-06-22T21:18:11Z"},{"body":"Ruby on Rails is divided into several separate pieces.  If you know what they are and what they do, you can use them individually.  You can also look up documentation more easily, and you'll know where to look for source code to a particular method, and which of several similarly-named methods does what you want.\r\n\r\n### The Gems\r\n\r\nBy default Rails includes not one, but five reusable gems. \u00a0The actual \"Rails\" gem contains very little code.  Instead, it delegates to the supporting gems. \u00a0Rails itself just ties them together.\r\n\r\nRails allows you to change out many components - you can specify a different ORM, a different testing library, a different Ruby template library or a different JavaScript library. \u00a0So the descriptions below aren\u2019t always 100% accurate for applications that customize heavily.\r\n\r\nBelow are the basic Rails gems -- not dependencies or libraries, but the fundamental pieces of Rails itself.\r\n\r\n### ActiveSupport\r\n\r\n<a href=\"http://guides.rubyonrails.org/active_support_core_extensions.html\">ActiveSupport</a> is a <a href=\"https://github.com/rails/rails/tree/master/activesupport\">compatibility library</a> including methods that aren't necessarily specific to Rails. \u00a0You'll see ActiveSupport used by non-Rails libraries because it contains such a lot of useful baseline functionality. \u00a0ActiveSupport includes methods like how Rails changes words from single to plural, or CamelCase to snake_case. \u00a0It also includes significantly better time and date support than the Ruby standard library.\r\n\r\n### ActiveModel\r\n\r\n<a href=\"https://github.com/rails/rails/tree/master/activemodel\">ActiveModel</a> hooks into features of your models that aren't really about the database - for instance, if you want a URL for a given model, <a href=\"http://yehudakatz.com/2010/01/10/activemodel-make-any-ruby-object-feel-like-activerecord/\">ActiveModel helps you there</a>. \u00a0It's a thin wrapper around many different ActiveModel implementations to tell Rails how to use them. \u00a0Most commonly, ActiveModel implementations are ORMs (see ActiveRecord, below), but they can also use non-relational storage like MongoDB, Redis, Memcached or even just local machine memory.\r\n\r\n### ActiveRecord\r\n\r\n<a href=\"http://api.rubyonrails.org/classes/ActiveRecord/Base.html\">ActiveRecord</a> is an Object-Relational Mapper (ORM). \u00a0That means that it maps between Ruby objects and tables in a SQL database.  When you <a href=\"http://guides.rubyonrails.org/active_record_querying.html\">query from or write to the SQL database in Rails</a>, you do it through ActiveRecord. \u00a0ActiveRecord also implements ActiveModel.  ActiveRecord supports MySQL and SQLite, plus JDBC, Oracle, PostgreSQL and many others.\r\n\r\n### ActionPack\r\n\r\n<a href=\"https://github.com/rails/rails/tree/master/actionpack\">ActionPack does routing</a> - the mapping of an incoming URL to a controller and action in Rails. \u00a0It also sets up your controllers and views, and shepherds a request through its controller action and then through rendering the view. \u00a0For some of it, ActionPack uses Rack. \u00a0The template rendering itself is done through an external gem like <a href=\"http://www.kuwata-lab.com/erubis/\">Erubis for .erb templates</a>, or <a href=\"http://haml.info/\">Haml for .haml templates</a>. \u00a0ActionPack also handles action- or view-centered functionality like view caching.\r\n\r\n### ActionMailer\r\n\r\n<a href=\"http://api.rubyonrails.org/classes/ActionMailer/Base.html\">ActionMailer</a> is used to <a href=\"http://guides.rubyonrails.org/action_mailer_basics.html\">send email</a>, especially email based on templates. \u00a0It works a lot like you'd hope Rails email would, with controllers, actions and \"views\" - which for email are text-based templates, not regular web-page templates.\r\n\r\n### Tying It Up\r\n\r\nThere's one more gem, called \"rails\", that ties these all together via something called \"RailsTies\".\r\n\r\nYou can <a href=\"https://github.com/rails/rails/tree/master/railties\">read the code if you like</a> -- it's quite short.\r\n\r\nBasically, something has to put all these pieces together.  Your app has some glue code to do this &mdash; try typing \"rails new myapp\", and read through the config directory for a sample.  But the rest is done by RailTies.\r\n\r\n### Now You Know\r\n\r\nKnowing what part of Rails does what is a great way to figure out where to find code and documentation.  And finding code and documentation is a great way to understand what Rails is doing.\r\n","created_at":"2013-07-07T23:29:49Z","id":46,"published":true,"title":"Understanding the Structure of Rails","updated_at":"2013-09-05T03:14:27Z"},{"body":"Here's an index of the articles making up the <a href=\"http://eepurl.com/CWXED\">free class about Ruby on Rails Internals</a>.\r\n\r\nThe class is normally offered by email, but you're cutting to the chase with a helpful full-class index.\r\n\r\nNote: this isn't quite complete.  Working on it!\r\n\r\n<ul>\r\n<li><a href=\"http://codefol.io/posts/46-Understanding-the-Structure-of-Rails\">Understanding the Structure of Rails</a></li>\r\n<li><a href=\"http://codefol.io/posts/48-Where-Do-I-Put-My-Code-\">Where Do I Put My Code?</a></li>\r\n<li><a href=\"http://codefol.io/posts/14--What-is-Rack-A-Primer\">What is Rack?  A Primer</a></li>\r\n<li><a href=\"http://codefol.io/posts/32-No-More-Requires\">No More Requires -- Rails Doesn't Need Requires and Neither Do You</a></li>\r\n<li><a href=\"http://codefol.io/posts/9-How-Does-Rack-Parse-Query-Params-With-parse-nested-query\">How Does Rack Parse Query Params?  With parse_nested_query</a></li>\r\n<li><a href=\"http://codefol.io/posts/11-Deep-Rails-Understanding-HashWithIndifferentAccess-Understanding-the-Params-Hash\">Understanding HashWithIndifferentAccess</a></li>\r\n<li><a href=\"http://portal.sliderocket.com/AIMWD/Five-Minute-Framework\">The Five-Minute Rack Framework</a></li>\r\n<li><a href=\"http://codefol.io/posts/51-Digging-Into-the-Rails-Source\">Digging Into the Rails Source</a></li>\r\n<li><a href=\"http://codefol.io/posts/52-The-Programmer-s-Secret-Weapon-for-Code-Spelunking\">The Programmer's Secret Weapon for Code Spelunking</a></li>\r\n</ul>\r\n\r\nAnd as a bonus for reading this far, <a href=\"http://codefol.io/posts/50-Web-Servers-and-Application-Servers\">a quick answer on why you'd deploy with a reverse proxy and an app server, not just an app server</a>.\r\n\r\nHaving trouble with anything?  Email me at noah underbar gibbs at yahoo dot com!  I love to hear from readers.","created_at":"2013-07-08T00:47:01Z","id":47,"published":true,"title":"Class Index","updated_at":"2013-09-04T03:04:48Z"},{"body":"Sometimes you\u2019re <i>sure</i> that\u2019s not the right place for that piece of code, but where <i>does</i> it go?  \"Refactor\" is only a good answer if you know how to fix it.\r\n\r\nIn a Rails application, and what kind of code goes where?\r\n\r\n### Models\r\n\r\nFor code about your database or <a href=\"http://c2.com/cgi/wiki?DomainObject\">domain objects</a>, the model is your first stop in Rails.  Models are powerful, easy to test, reusable across applications and more like non-Rails code than most of Rails -- familiar, even if you don\u2019t know Rails yet.\r\n\r\nIf there's a good way to put the code in your model, that's usually a safe bet and a good idea.\r\n\r\nWrite tests too, of course!\r\n\r\n### Controllers\r\n\r\nIt\u2019s easy to put lots of code in your controllers, but it\u2019s <a href=\"http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model\">almost always a mistake</a>.  Business logic for your app should get out of the controller and into the model as quickly as possible.  Logic about how things are shown to the user should go into the view.  In general, the controller should be a tiny, thin glue layer putting together your other components.\r\n\r\n### Views\r\n\r\nHaving lots of logic in your views is a huge anti-pattern.  Don\u2019t do it.  It\u2019s hard to test, it\u2019s hard to find, it\u2019s hard to write sandwiched in between the HTML...  Just don\u2019t.\r\n\r\nInstead, your views should contain HTML, variables that turn into HTML, and calls to helper methods that generate HTML &mdash; or whatever your final output format is.  There should be no logic in there <i>to</i> test.  No conditionals, no loops, no non-display methods.  If you add an output format, there should be no code to repeat because all the interesting data transforms already happened, and no other output format cares about your HTML-only helpers.  Right?\r\n\r\n### Helpers\r\n\r\nRails \"helpers\" are very specifically view helpers.  They\u2019re automatically included in views, but <i>not</i> in controllers.  That\u2019s on purpose.\r\n\r\nCode in the application helper is included in all the views in your application.  Code in other helpers is included in the corresponding view.  If you find yourself writing big loops, method calls or other logic in the view but it\u2019s clearly display logic, move it into a method in the helper.\r\n\r\n### The /lib Directory\r\n\r\nEvery Rails app starts with a /lib directory, but not much explanation of it.\r\n\r\nRemember that helpers are specifically view helpers?  What if you wanted a controller helper?  Or a model helper?  Sometimes you can use a parent controller or parent model, but that\u2019s not always the best choice.\r\n\r\nIf you want to write a helper module for non-view logic, the /lib directory is usually the best place to put it.  For example, logging code or some kinds of error handling may be a cross-cutting concern like that.\r\n\r\nAlso, if you're putting everything in the ApplicationController or ApplicationHelper, those can get big.  Consider factoring some of that code out into helpers, or into /lib.\r\n\r\nStuff in /lib isn\u2019t always automagically included for you like controllers and models.  So you may need to explicitly require the file, not just use the name of the class.\r\n\r\n### Gems\r\n\r\nSometimes you have reusable pieces in your application.  A controller or model might be needed by multiple different Rails apps.  A particular piece of logic for logging or display might be useful to a lot of different folks.  You might even find <a href=\"https://github.com/voxdolo/decent_exposure\">a different way of doing things</a> that most Rails apps would benefit from.\r\n\r\nThese are all cases where you want to create a new gem and have your applications use it instead of sharing a directory of code.\r\n\r\n<a href=\"http://railscasts.com/episodes/245-new-gem-with-bundler\">These days it\u2019s really easy to create a new gem</a>, so don\u2019t be intimidated.  If you haven\u2019t worked through the first free chapter of Rebuilding Rails, this may be a good time to do it &mdash; it\u2019ll show you how to quickly, easily create and use a new gem.\r\n\r\n### Assets\r\n\r\nIn a few cases, you\u2019re not even writing Ruby code.  Instead, it may be Sass, Scss, JavaScript or CoffeeScript.  In this case, it generally belongs under app/assets.\r\n\r\n### Concerns and Exceptions\r\n\r\nRails has a very specific, very unusual setup.  I think it\u2019s a good idea for small apps, but only <a href=\"http://evan.tiggerpalace.com/articles/2012/11/21/use-rails-until-it-hurts\">use Rails until it hurts</a>.  If your application gets too big or complicated, the Rails code organization may hurt more than it helps you.\r\n\r\nThere are several \"grow out of Rails\" approaches to apply alternate architectures to the framework.  From <a href=\"https://www.agileplannerapp.com/blog/building-agile-planner/refactoring-with-hexagonal-rails\">Hexagonal Rails</a> to <a href=\"http://objectsonrails.com/\">Objects on Rails</a> to the more general <a href=\"http://www.clean-ruby.com/\">Clean Ruby</a> DCI approach.  I won\u2019t tell you which to use, but I\u2019ll tell you that you\u2019re better off starting with plain, simple Rails and growing out of it.\r\n\r\nMost Rails apps, and even more Rails controllers, don\u2019t need to get all that big.  They often don\u2019t need to change much.  Why go complicated when simple is working great?\r\n","created_at":"2013-07-08T01:23:45Z","id":48,"published":true,"title":"Where Do I Put My Code?","updated_at":"2014-01-07T15:16:01Z"},{"body":"I need to be careful how I recommend StartCom SSL certificates from now on.\r\n\r\nIt turns out that on page 12 of the <a href=\"http://startssl.com/policy.pdf\">StartCom policy document</a> they tell you that you can't use the free certificates for any commercial activities.\r\n\r\nTheir product descriptions, product comparisons and all other documentation I've found fail to mention this.  They literally pointed me at the policy document when turning me down for a renewal -- that is, they have no simpler or more straightforward explanation.\r\n\r\nThat is, they're hiding it and then expecting me to not argue on renewal.\r\n\r\nThey've otherwise been great.  No problems with service, a perfectly good web site for free/cheap certificates.  Overall, I've had a very reasonable user experience...  Until now.\r\n\r\nIt's perfectly understandable that they want money for a certificate if I'm going to use it for commercial purposes.\r\n\r\nThey're just taking a reasonable thing and presenting it dishonestly.\r\n\r\nAnd now I'm paranoid about <i>next</i> renewal.  What other carefully-buried terms did I not see?\r\n","created_at":"2013-07-14T17:18:53Z","id":49,"published":true,"title":"StartCom SSL Certificates","updated_at":"2013-07-14T17:18:53Z"},{"body":"A reader recently asked me why Ruby web app deploys usually have a web server (NGinX, Apache) <i>and</i> an application server (Unicorn, Thin, Puma, Racer, Mongrel, Passenger, Jakarta, TorqueBox or whatever I've forgotten this week).\r\n\r\nActually, he asked, \"why do I need to run NGinX <i>and</i> Unicorn?\"  It's a fair question.\r\n\r\n### My Answer\r\n\r\nIn some sense you don't need it.  It's 100% possible to just run Unicorn for your site.  The main reasons to run a web server as a reverse proxy (NGinX or Apache):\r\n\r\n* Speed.  Both of those servers handle static requests *much* faster than any Ruby app server.  They're designed for it.\r\n\r\n* Configurability.  NGinX and Apache have many options related to security, SSL, rewriting URLs and request queueing with no equivalent in the app server.  They also have an easier time running multiple different sites at once (example: running five subdomains with three different Ruby versions) for similar reasons.\r\n\r\n* Stability.  The web servers fail more rarely and gracefully, partly because they have a *much* larger audience than all Ruby app servers together.\r\n\r\n* Support.  If you need to add an option (example: fair round-robin request queueing), it's much easier to find a plugin for NGinX or Apache.\r\n\r\nWith that said, when you have a small simple site, you can totally run it off Unicorn and call it a day.  You won't have as many configuration options available.  You'll have more trouble with SSL support.  You'll serve fewer requests (static ones for CSS, JS, etc. add up).  You'll have slightly more downtime.  But for small sites, you may not care about any of that.\r\n\r\nNote that Passenger is a weird hybrid here.  It's a Ruby app server, but it bakes in a copy of NGinX.  So it's much closer to running with NGinX *and* an app server than Unicorn or Thin.\r\n","created_at":"2013-08-11T16:06:44Z","id":50,"published":true,"title":"Web Servers and Application Servers","updated_at":"2013-08-11T16:07:15Z"},{"body":"You\u2019ve made it mostway through your free Ruby on Rails Internals class.  Today we\u2019ll be poking around the Rails source code.  If you have money but not time, Rebuilding Rails lets you find a lot quickly\u2026  But in case you have more time, we\u2019ll see where in the Rails source you can learn the same things for yourself.\r\n\r\nFirst off, Rails has a combination of terse, pithy code (easy to read!) and good, solid tests which help explain what a given piece of code <i>does</i>.  I recommend switching back and forth between implementation and tests often when reading.\r\n\r\nHead to <a href=\"http://github.com/rails/rails\">Rails on GitHub</a>.  My screenshots are branch 3.2-stable, or you can look at latest.  You can already see the division into gems with the various directories: actionmailer, actionpack, activemodel, activerecord, activeresource and activesupport.\r\n\r\n<img src=\"/images/51/github_screen.png\" width=\"956\" height=\"657\" />\r\n\r\nYou can see the controller and view code in \u201cactionpack\u201d (note: <a href=\"https://github.com/rails/rails/tree/master/actionview\">actionview has been extracted</a> in Rails 4).  Rebuilding Rails has an easy simplified version, but you can see the real thing in there with some work.  <a href=\"https://github.com/rails/rails/tree/master/actionpack/lib\">Inside actionpack/lib are subdirectories</a> like action_controller which provide a great start for a deep dive.\r\n\r\n<h2> Rack </h2>\r\n\r\nLater chapters of Rebuilding Rails talk a lot about Rack, including Rack Middleware.  For that, you should look at http://github.com/rack/rack instead of Rails.  Luckily, most of the Rack code you care about is quite short.  Unluckily, it\u2019s poorly documented.  Again, make sure to read tests (where they exist) for best understanding.  I don\u2019t know another introduction as good as Chapter 8 of Rebuilding Rails, but you can get some of the same content from a <a href=\"http://www.youtube.com/watch?v=evDJMLb1d28&feature=youtu.be\">my Ruby Hangout interview on Rack frameworks</a>.\r\n\r\n<img src=\"/images/51/rack_screen.png\" width=\"805\" height=\"571\" />\r\n\r\n<h2> Dependencies </h2>\r\n\r\nRails also depends on a number of other libraries.  It\u2019s hard to understand ActiveRecord without <a href=\"https://github.com/rails/arel\">Arel</a>, for instance.  Read through the <a href=\"https://github.com/rails/rails/blob/master/rails.gemspec\">.gemspec</a> <a href=\"https://github.com/rails/rails/blob/master/activesupport/activesupport.gemspec\">files</a> when you want to know what Rails depends on.  That\u2019s also great when thinking, \u201chuh, what else should I add to my own framework?\u201d  If you don\u2019t know what a gem does, Google something like <b>\u201carel gem\u201d</b> or <b>\u201ctzinfo gem\u201d</b> or <b>\u201cruby mail gem\u201d</b>.  You can also check out rubygems.org to track down info and documentation if you know its name.\r\n\r\nIn general, look at dependencies like Gemfile and .gemspec files for every library you look at.  You can learn a <i>lot</i> about any library from what gems it uses.\r\n\r\n<h2> Get the Code Locally </h2>\r\n\r\nGitHub is a nice interface and all, but it\u2019s no substitute for having the code locally where you can use it.  Make sure to clone the code for the things you care about, and \u201cbundle install\u201d the dependencies you won\u2019t be drilling into yet.  If you use a Ruby IDE like RubyMine that may help.  We\u2019ll talk about what I use for exploration in the next lesson.\r\n\r\n<h2> And Now, a Word From... </h2>\r\n\r\nIncidentally - if you prefer the guided tour, considering buying Rebuilding Rails for your workplace.  Companies pay more for your time than just your salary -- Rebuilding Rails is probably a good investment if it saves you just half an hour.\r\n\r\nWill it, though?  Start with the free chapters, and see if anything in there could save you ten minutes.  Or just buy it, and if you\u2019re not delighted, I\u2019ll refund your money.","created_at":"2013-08-31T23:37:17Z","id":51,"published":true,"title":"Digging Into the Rails Source","updated_at":"2013-09-04T02:51:34Z"},{"body":"A lot of the time, it\u2019s hard to find where Ruby has defined something.  When you want to know, \u201cwhat code did that?\u201d, some languages have debugger watchpoints, Java has Eclipse, Ruby has\u2026?  What?\r\n\r\nRuby isn\u2019t terribly friendly to IDEs.  Dynamic method definition, highly configurable inheritance, libraries like ActiveRecord that reconfigure at runtime\u2026  IDEs have a lot of trouble finding the code you want in a highly dynamic language.  With great power comes great responsibility.  Which often means you\u2019re suddenly on your own.\r\n\r\n<a href=\"http://beyondgrep.com\"><img src=\"/images/52/ack_screen.png\" style=\"border: 5px solid black;\" /></a>\r\n\r\nIn Ruby, my go-to solution is command-line code search.  I\u2019ve used <a href=\"http://beyondgrep.com\">Ack</a> for many years.  While recursive find would take seconds or minutes, Ack would take well under ten seconds, consistently.  It\u2019s very fast, recursive, uses Perl-compatible regexps, very fast, lets you search by language, very fast, doesn\u2019t require an IDE or project file and did I mention very fast?  I used it constantly until about April.\r\n\r\nAnd then I found Ag (\"https://github.com/ggreer/the_silver_searcher\").  It is THREE TIMES as fast as Ack.  You know that jaw-hits-floor moment?  When I first searched for something in a large code tree with Ag\u2026  It was <a href=\"http://www.nngroup.com/articles/response-times-3-important-limits/\">faster than fast -- instant</a>.  I hit the return key and the output was just there.  As fast as the next prompt popped up, so did a page and a half of search results.\r\n\r\n<a href=\"http://www.nngroup.com/articles/response-times-3-important-limits/\"><img src=\"/images/52/usability_screen.png\" style=\"border: 5px solid black;\" /></a>\r\n\r\nWhen you\u2019re looking for code, stop waiting on anything.  Don\u2019t wait on GNU find or your IDE.  When you\u2019re used to instant search you\u2019ll have your next query half-composed by the time you hit return on your first one.  Searching for code becomes a <a href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\">Read-Eval-Print Loop</a> like in any good language.  Like the <a href=\"http://en.wikipedia.org/wiki/OODA_loop\">OODA loop</a>, you can tighten it up and everything just feels better.\r\n\r\n<a href=\"http://en.wikipedia.org/wiki/OODA_loop\"><img src=\"/images/52/ooda_loop.png\" style=\"border: 5px solid black;\" /></a>\r\n\r\nSome quick gotchas in Ruby -- often a method is dynamically defined, so you can\u2019t always find it by its name.  Sometimes you\u2019re looking for a table and ActiveRecord changes from snake_case to CamelCase.  Regexps and case-insensitive search (-i) can really help you out here -- get used to using them.\r\n\r\nSometimes files aren\u2019t searched by default.  For instance, Rakefiles and .erb files may not be in Ack\u2019s default idea of Ruby files.  You can add an <a href=\"https://gist.github.com/kevinold/4749656\">.ackrc</a> and configure Ack exactly to your liking.  That\u2019s one of the better advantages over Ag, in fact.  Consider using <i>both</i> of them, especially if you like speed but also need regexps occasionally -- and use a tool like <a href=\"https://github.com/sampson-chen/sack\">Sack</a> to automatically switch between them so you don\u2019t have to remember when to use each.","created_at":"2013-09-04T02:47:34Z","id":52,"published":true,"title":"The Programmer's Secret Weapon for Code Spelunking","updated_at":"2013-09-04T03:03:32Z"},{"body":"I'm reading a fine classic of programming, <a href=\"http://www.amazon.com/The-Metaobject-Protocol-Gregor-Kiczales/dp/0262610744\">The Art of the MetaObject Protocol</a>.\r\n\r\nIt's interesting how dated some of the assumptions in it are.  For instance, it reads as though they're being intentionally obtuse, but only because I'm now so used to these ideas from Ruby -- when the book was written, this was obscure, fringe stuff and there wasn't a good vocabulary for it.\r\n\r\nI had somehow gotten the impression that the book was about designing extended REST APIs, or what we'd now call a <a href=\"http://www.designinghypermediaapis.com/\">HyperMedia API</a>.  That impression now appears to be ten kinds of wrong.\r\n\r\nInstead, it's about extending a language upwards, using macros, in many different directions at once.\r\n\r\nSuddenly, I'm seeing possibilities that Ruby hasn't got, or has <a href=\"http://blog.headius.com/2012/11/refining-ruby.html\">screwed up pretty thoroughly</a>.  Interesting.\r\n\r\nThough it seems like <a href=\"http://stackoverflow.com/questions/4061579/does-ruby-have-a-metaobject-protocol-and-if-not-is-it-possible-to-implement-one\">the commentary on metaobject protocol in Ruby is pretty weak</a> in general.\r\n","created_at":"2013-09-18T02:59:41Z","id":53,"published":true,"title":"The Art of the MetaObject Protocol","updated_at":"2013-09-18T02:59:41Z"},{"body":"Ruby and Python, so similar and so different.  By which I mean, \"the languages let you do the same things in most of the same ways, but the communities are utterly different.\"\r\n\r\n<h3> Community Mores </h3>\r\n\r\nPython says, <a href=\"http://www.python.org/dev/peps/pep-0020/\">there should be one &mdash; and preferably only one &mdash; obvious way to do it</a>.\r\n\r\nRuby, like Perl, says <a href=\"http://blog.bignerdranch.com/1605-writing-readable-ruby/\">there's more than one way to do it</a>.  More specifically, the community is <i>okay</i> with there being <a href=\"http://mislav.uniqpath.com/poignant-guide/\">more than one way</a> to do it.\r\n\r\nPython tries very hard to keep a single consensus.  The Ruby community says, \"have fun,  come back, show us what you built!\"\r\n\r\n<a href=\"http://raganwald.com/2008/07/my-analyst-warned-me-but.html\">The Ruby folks tolerate the mistakes, steal the best stuff, and adopt it &mdash; we think everybody should have really sharp tools.</a>\r\n\r\nAnd, sure, sometimes there are problems.\r\n\r\n<h3> Problems and Solutions </h3>\r\n\r\nIf you take the best 2% of <a href=\"http://michaelochurch.wordpress.com/2013/03/19/gervais-macleod-12-growth-chaos-and-risk/\">utter chaos</a>, you get some chaos in the results.  \"Best\" is hard to judge, right?\r\n\r\nSo you get wildly different tools and ideas every few years &mdash; <a href=\"http://rubygems.org/\">RubyGems</a>, <a href=\"http://rubygems.org/gems/hoe\">Hoe</a>, <a href=\"http://bundler.io/\">Bundler</a>, <a href=\"http://rvm.io\">RVM</a>, <a href=\"http://haml.info/\">Haml</a>, <a href=\"https://github.com/voxdolo/decent_exposure\">Decent_Exposure</a>)...  And somehow, the community takes it all in good humor.  There's a little fashion-mongering &mdash; <b>\"nobody's <i>still</i> using RVM, dahling, it's all <a href=\"https://github.com/sstephenson/rbenv\">rbenv</a> these days!\"</b>.  But mostly, we take the best, adopt it and keep building great software.\r\n\r\nThe Ruby community reminds me, over and over, of <a href=\"http://en.wikipedia.org/wiki/Transmetropolitan\">Warren Ellis' Transmetropolitan</a>.  It's about a wonderfully dystopian future and a whacked-out journalist as your view into it...\r\n\r\n<br/><br/><tt>This city never allowed itself to decay or degrade. It's wildly, intensely growing. It's a loud bright stinking mess.<br/><br/>It takes strength from its thousands of cultures, and the thousands more that grow anew each day.<br/><br/>&mdash; Spider Jerusalem, Transmetropolitan</tt> <br/><br/>\r\n\r\nThe Ruby community is <i>exactly</i> that kind of loud, bright, stinking mess.\r\n\r\nAnd as he says... \"but God help me, I can't imagine living anywhere else.\"","created_at":"2013-09-26T03:27:41Z","id":54,"published":true,"title":"The Ruby Community is a Loud, Bright, Wonderful Mess","updated_at":"2013-09-26T03:43:41Z"},{"body":"I got mail from somebody with a vision for an app, wanting to know how much it would cost to build their idea.\r\n\r\nThis is my advice to him, with a few specifics redacted:\r\n\r\nHey, (Name).\r\n\r\nI only have an approximate answer, but I'll try.  First off:  800-1000 hours at $55/hr isn't an unreasonable estimate at all for a mid-sized app.  There are people who can get this done in a lot less than 800 hours...  And they'll all charge more than $55/hr.  So you're unlikely to get it done well and much cheaper than that.  You could get it done badly, usually overseas, for *much* cheaper than that, but there are a lot of obvious pitfalls -- it could work, but it often doesn't.\r\n\r\nYou have a full, rich site idea -- you have a lot of ideas for \"extra\" features like categorizing shared (data).  You haven't trimmed your idea down to its leanest form.  The very best developers will work with you to refine the <b>vision</b> you have for the site and figure out what's important to your users.  As a side effect, they may be able to do it faster be removing parts that aren't necessarily vital, such as the categorization...  Or put off features that are good, but aren't 100% necessary at launch (following other people's shares?).  Or find a way to use an existing network and base the friend/follow feature off that (Twitter account?  Facebook?).\r\n\r\nSome part of what you're trying to do is its \"most unique\" part, something that makes it different from other sites.  Otherwise why would you spend thousands of dollars to build it?  In that way, a <i>really</i> good developer can \"tease out\" that vision and build just the smallest thing that tests it.  And they can do that in a lot less than 800-1000 hours.  Then you can build only the later features that makes sense.  Or if your initial idea didn't work, you can refine that instead of building \"extra\" features that will only matter when and if your first idea is really working.\r\n\r\nBut $55/hr would be very, very cheap for a really good developer, Rails or not.  You can get a Rails dev for $55/hr, and they will eventually be able to do the things you list there on the features.  Usually you should expect to pay more for a CA Rails developer, though, more like $75/hr.\r\n\r\nBut the best thing you can do is to refine your vision down to something smaller -- Startup guys call it an MVP (\"minimum viable product\").  Because it's much cheaper to test your ideas with an MVP than with a full built-out site...  And until you have something fun that feels good, building a bigger site just burns your money and slows you down.\r\n\r\nThe other thing you should consider for a (data)-sharing site is design.  How pretty do you need this to be?  How good does it need to \"feel\" to users?  Do you need nice visual transitions?  If you're going to need a designer, do NOT have a dev build the site and then try to \"paint\" on the design afterward.  The designer will have strong ideas about how to do things and you can get the most value from a good (and expensive!) designer by asking <i>before</i> you have the whole site decided.\r\n\r\nAlso, a designer may produce nice mockups that will show your developer exactly what to build.  Communicating exactly what you want to a developer is very hard -- the feature list above could be any of hundreds of different site layouts.  Single-page?  One big Twitter-style feed? Separate SoundCloud-like sub-pages?  A developer could do exactly what you said there and still disappoint you, or just produce something ugly and unusable.\r\n\r\nIf you're going to need a designer, figure that out early.  If you aren't, make sure your developer has good work in their portfolio that <i>they have designed</i>.  Also, expect to pay more.\r\n","created_at":"2013-10-17T16:00:59Z","id":55,"published":true,"title":"On Hiring a Developer","updated_at":"2013-10-17T16:00:59Z"},{"body":"Five minutes on the Internet will find you <i>somebody</i> who thinks <b>Ruby shouldn't exist and is clearly inferior</b> (try it!).  Or pick a big tech company, especially an \"Enterprise\" company.  Same thing -- <b>you'll find a Ruby-hater in five minutes</b> if you're actually trying.\r\n\r\nIf Rubyists keep doing the right thing, <b>this will be true forever</b>.  Let me explain.\r\n\r\n### What Ruby Rocks At\r\n\r\nThere's a set of things Ruby is really good at.  I'll list some of them:\r\n\r\n* Prototyping new ideas\r\n* Anything web or HTTP\r\n* Stuff that doesn't need to be fast\r\n* Reading other people's code - Ruby is short and readable.\r\n* Building tools and libraries, especially <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSLs</a>.\r\n\r\nThere are some other things Ruby is \"good\" at.  Like, it's good at them but many people think they're a bad idea.  I'll list some of those, too:\r\n\r\n* Taking on a massive technical debt \"loan\", quickly\r\n* Using lots of other people's code with minimal examination (<a href=\"http://rubygems.org\">gems</a>!)\r\n* Monkeypatching\r\n* Patching up somebody else's code dynamically, in an un-maintainable way.\r\n\r\nIf you put list one and list two together, what should Ruby be really, really good at?\r\n\r\n### Ruby and Valley Culture\r\n\r\nHow about this?\r\n\r\n<b><i>\"Ruby is absolutely amazing at quickly prototyping ideas for web sites and web apps, based on other people's code, with huge technical debt, when they haven't had to scale yet.\"</i></b>\r\n\r\nIf you're working in a big enterprise company, that should sound like damning Ruby with faint praise.\r\n\r\nIf you're building a little Silicon Valley startup, you should get dollar signs in your eyes when you read that.\r\n\r\nAnd that's the difference.  That's why the ads on LinkedIn think Rubyists make about $15,000/yr more than Pythonistas right now, despite the two languages' parse trees <b>looking like lost twins</b>.\r\n\r\n### The Dark Side\r\n\r\nOf course, that mad phat l3wt doesn't come without a price.\r\n\r\nIf thousands of Silicon Valley founders build their dubious ideas on Ruby, you'll see 90% of those projects sink -- they were bad ideas in the first place.  And that's fine -- they failed cheap, and that's good.\r\n\r\n<b>But worse, 10% of those ideas will succeed, built in Ruby,</b> and get bought by larger companies for their customers and engineers.\r\n\r\nWhich means that <b>a flood of badly-built Ruby apps is coming</b>, and it's coming <b>because building in Ruby was exactly the right thing</b>.  And a whole generation of grizzled enterprise veterans are going to see nothing but Ruby apps which were (intentionally, correctly, appropriately) built with the absolute maximum amount of technical debt, in absolute minimum time, assuming it would all get rebuilt.\r\n\r\n<b>If Ruby keeps being the best, most powerful, most appropriate way to validate your app idea, it will remain forever a technical laughingstock.</b>\r\n\r\nThe kind of engineers who ignore technical and business merits and just go based on what their Enterprise buddies say will <b>always</b> think Ruby is a ridiculous toy language and all Ruby code sucks.\r\n\r\nThank God.\r\n\r\nI won't need to work with them ever again.\r\n","created_at":"2013-10-27T21:50:32Z","id":56,"published":true,"title":"Why Ruby Should Stay a Laughing Stock","updated_at":"2013-10-29T04:28:35Z"},{"body":"There's a semi-famous book, <a href=\"http://en.wikipedia.org/wiki/The_Art_of_the_Metaobject_Protocol\">The Art of the Metaobject Protocol</a> by Kiczales, des Rivieres and Bobrow.  Alan Kay, the guy who invented SmallTalk and the phrase \"Object Oriented\", called it the best book in ten years.\r\n\r\nBut it's takes some describing.\r\n\r\n## What is a Metaobject Protocol?\r\n\r\nYou know how Ruby has a class called \"Class\"?  And how all classes are instances of it?  And how Class is a subclass of Module?\r\n\r\nThe Metaobject protocol asks, \"what if there were *more* subclasses of Class?  And you could make classes from them, instead of plain old Class?\"\r\n\r\nAlso, it includes what we'd now call introspection functions -- they didn't usually call it that twenty years ago when this was published.\r\n\r\nBut what, specifically, does that mean?\r\n\r\nIt includes:\r\n\r\n* introspection on classes, methods and instances\r\n* runtime definition of classes, methods and instances\r\n* specialized initializers -- constructors, effectively\r\n* subclasses of \"Class\" with special behavior, called Metaclasses\r\n* hooks for computing the class precedence list, for things like variable definition and what methods are called when parent classes conflict\r\n\r\nMost of this doesn't look too surprising.  Clearly Ruby already has a lot of it.\r\n\r\nHow much of it?\r\n\r\n## Ruby Equivalents for Metaobject Protocol Hooks\r\n\r\nRuby already lets you do some really interesting things with your classes <a href=\"http://codefol.io/posts/58-What-Hooks-does-Ruby-have-for-Metaprogramming-\">using hooks, as you metaprogrammers already know</a>.\r\n\r\nIn Ruby, instead of a metaclass, you would make a subclass of Object that defined some hooks, and then classes that inherit from that class would get that behavior.  Ruby's inherited and method_defined hooks, for instance, are very similar to redefining the inheritance or method definition behavior in a metaclass.\r\n\r\nBut the Metaobject protocol lets you do a few things with classes that Ruby doesn't (easily).\r\n\r\nIt defines a hook for \"the class is all done being defined\" (\"finalize-inheritance\") -- Ruby never prevents you from including modules or defining methods, so it has no such callback.  It's never \"final.\"\r\n\r\nThe Metaobject protocol lets you say \"here is the order to look through parent classes when defining variables and what method gets called.\"  That's not impossible in Ruby, but you'd have to do a lot of undefining and redefining in your classes -- it's clearly not easy.\r\n\r\nThe other big things that the Metaobject Protocol allows are mostly about generic functions, a very powerful Lisp construct that Ruby has no equivalent for.  While we could debate whether Ruby should allow generic functions, it doesn't...  And so there's no equivalents for them.\r\n\r\n## So... Does Ruby Have One, Or Not?\r\n\r\nRuby doesn't let you create a subclass of Class -- try it in irb!\r\n\r\nSo in the simple, literal sense it definitely does not.\r\n\r\nAnd it doesn't easily let you calculate a class precedence list, so it's missing at least one major piece of functionality from the Lisp Metaobject Protocol...\r\n\r\nBut amusingly, you could absolutely write a gem for that!  You'd implement all the inheritance and method_definition hooks and then calculate the method precedence as soon as somebody called a function...\r\n\r\nSo Ruby has nearly all the power of a Metaobject protocol, except for a lack of generic functions.  Which could also be written as a gem (I'm <b>so</b> getting flamed for this).\r\n","created_at":"2013-11-19T04:58:24Z","id":57,"published":true,"title":"Does Ruby Have a Metaobject Protocol?","updated_at":"2013-11-19T06:09:49Z"},{"body":"Ruby lets you hook in and see (and change!) a lot of behavior of the core language.  Methods, constants, classes, variables...  Ruby lets you query them all, and change a lot about them.\r\n\r\nThese are just hooks -- things Ruby calls in response to something happening.  That's different from, say, all the methods you can call to find our what's defined and how -- like instance variables, or method bindings, or...\r\n\r\nHere's summaries and links for all the hooks I could find (thanks to Google and StackOverflow!):\r\n\r\n## Methods\r\n\r\n<ul>\r\n  <li><a href=\"http://robots.thoughtbot.com/always-define-respond-to-missing-when-overriding\">respond_to_missing?: a way to make sure your dynamic methods defined with method_missing also handle respond_to? correctly</a></li>\r\n  <li><a href=\"http://ruby-doc.org/core-2.0.0/BasicObject.html#method-i-method_missing\">method_missing: called when a method cannot be found, potentially to allow dynamically defining one instead</a></li>\r\n  <li><a href=\"http://ruby-doc.org/core-2.0.0/Module.html#method-i-method_added\">method_added: called whenever a method is added... which can be used to modify the method</a></li>\r\n  <li><a href=\"http://ruby-doc.org/core-2.0.0/Module.html#method-i-method_removed\">method_removed: called whenever a method is removed</a></li>\r\n  <li><a href=\"http://www.ruby-doc.org/core-1.9.3/BasicObject.html#method-i-singleton_method_added\">singleton_method_added: method added to the singleton class of the object, to be callable just on this one instance</a></li>\r\n  <li><a href=\"http://www.ruby-doc.org/core-1.9.3/BasicObject.html#method-i-singleton_method_removed\">singleton_method_removed: method removed from singleton class</a></li>\r\n  <li><a href=\"http://ruby-doc.org/core-2.0.0/Module.html#method-i-method_undefined\">method_undefined: a method has been undefined, with undef_method.</a>  Undef_method is different from remove_method because remove_method may still allow superclasses to define the method -- undef_method means it's gone entirely.</li>\r\n  <a href=\"http://www.ruby-doc.org/core-1.9.3/BasicObject.html#method-i-singleton_method_undefined\">singleton_method_undefined: called when a singleton method is undefined entirely</a></li>\r\n  <li>initialize_copy: an optional callback when cloning any Object</li>\r\n</ul>\r\n\r\n## Classes\r\n\r\n<ul>\r\n  <li><a href=\"http://www.ruby-doc.org/core-2.0.0/Class.html#method-i-inherited\">inherited: a Ruby class is subclassed</a></li>\r\n</ul>\r\n\r\n## Modules\r\n\r\n<ul>\r\n  <li><a href=\"http://www.ruby-doc.org/core-2.0.0/Module.html#method-i-append_features\">append_features: a Module is included, and its constants, methods and variables used</a></li>\r\n  <li><a href=\"http://ruby-doc.org/core-2.0.0/Module.html#method-i-included\">included: a Module is included</a>, which usually obsoletes \"append_features\"</li>\r\n  <li><a href=\"http://ruby-doc.org/core-2.0.0/Module.html#method-i-extend_object\">extend_object: a Module extends an Object</a></li>\r\n  <li><a href=\"http://ruby-doc.org/core-2.0.0/Module.html#method-i-extended\">extended: an Object is extended by a module</a>, which mostly obsoletes extend_object</li>\r\n  <li><a href=\"http://ruby-doc.org/core-2.0.0/Module.html#method-i-const_missing\">const_missing: a constant isn't already present</a></li>\r\n</ul>\r\n\r\n## Marshalling\r\n\r\n<ul>\r\n  <li><a href=\"http://ruby-doc.org/core-2.0.0/Marshal.html\">marshal_dump: called on an object to have it dump itself in Ruby Marshal format</a></li>\r\n  <li><a href=\"http://ruby-doc.org/core-2.0.0/Marshal.html\">marshal_load: called on an object to have it load itself in Ruby Mashal format</a></li>\r\n</ul>\r\n\r\n## Coercion\r\n\r\n<ul>\r\n  <li><a href=\"http://stackoverflow.com/questions/2799571/in-ruby-how-does-coerce-actually-work\">coerce: called by the first type in a two-argument operator on the second argument, to make it turn into something the first argument can recognize</a></li>\r\n  <li>induced_from: deprecated, please don't use</li>\r\n  <li>to_i, to_f, to_s, to_a, to_hash, to_proc and others: conversions, indicating that the object is being used as a type and should try to convert itself to that type</li> \r\n</ul>","created_at":"2013-11-19T05:43:42Z","id":58,"published":true,"title":"What Hooks does Ruby have for Metaprogramming?","updated_at":"2013-11-19T05:49:23Z"},{"body":"Here's the thing:  if you want to meet Britney Spears, odds are good that Britney Spears doesn't want to meet you.\r\n\r\nIf you're Lady Gaga, then Britney Spears probably <i>does</i> want to meet you.\r\n\r\nBut if you say, \"hey, I'm Lady Gaga!\" and you're not, that doesn't work.\r\n\r\nYou have to go be Lady Gaga, out where everybody can see.\r\n\r\nAnd then Britney may say, \"hey, you seem pretty cool.  Wanna hang out?\"\r\n","created_at":"2013-12-24T04:58:23Z","id":59,"published":true,"title":"You and Britney Spears == BFFs?","updated_at":"2013-12-24T04:58:23Z"},{"body":"When I was taking the <a href=\"http://online2.msf-usa.org/msf/Default.aspx?wvsessionid=6a4ad4b138474bcfa211b2ade223660d#&panel1-1\">Motorcycle Safety Foundation</a> class awhile back (it's awesome!) they said something that stuck with me.\r\n\r\n\"None of you are good enough to hit your motorcycle's limits, even with these little bikes.  You'll have to ride for years before you're hitting the bike's limits instead of yours.\"\r\n\r\nI'm close to 40.  I will never again get smarter, quicker, or have a better memory.  My brain has a performance curve -- I haven't hit the \"descending rapidly\" part or anything, but it doesn't go up from here.\r\n\r\nIt has still taken many years to start hitting my brain's limits.  I just wasn't a good enough operator yet.\r\n","created_at":"2013-12-29T00:33:05Z","id":60,"published":true,"title":"Your Mind is a Motorcycle","updated_at":"2013-12-29T00:33:05Z"}]